{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\n/** @private */\n\nvar ServerSentEventsTransport =\n/** @class */\nfunction () {\n  function ServerSentEventsTransport(httpClient, accessTokenFactory, logger, logMessageContent) {\n    this.httpClient = httpClient;\n\n    this.accessTokenFactory = accessTokenFactory || function () {\n      return null;\n    };\n\n    this.logger = logger;\n    this.logMessageContent = logMessageContent;\n  }\n\n  ServerSentEventsTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n            if (typeof EventSource === \"undefined\") {\n              throw new Error(\"'EventSource' is not supported in your environment.\");\n            }\n\n            this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n\n            this.url = url;\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              var opened = false;\n\n              if (transferFormat !== TransferFormat.Text) {\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\n              }\n\n              var eventSource = new EventSource(url, {\n                withCredentials: true\n              });\n\n              try {\n                eventSource.onmessage = function (e) {\n                  if (_this.onreceive) {\n                    try {\n                      _this.logger.log(LogLevel.Trace, \"(SSE transport) data received. \" + getDataDetail(e.data, _this.logMessageContent) + \".\");\n\n                      _this.onreceive(e.data);\n                    } catch (error) {\n                      if (_this.onclose) {\n                        _this.onclose(error);\n                      }\n\n                      return;\n                    }\n                  }\n                };\n\n                eventSource.onerror = function (e) {\n                  var error = new Error(e.message || \"Error occurred\");\n\n                  if (opened) {\n                    _this.close(error);\n                  } else {\n                    reject(error);\n                  }\n                };\n\n                eventSource.onopen = function () {\n                  _this.logger.log(LogLevel.Information, \"SSE connected to \" + _this.url);\n\n                  _this.eventSource = eventSource;\n                  opened = true;\n                  resolve();\n                };\n              } catch (e) {\n                return Promise.reject(e);\n              }\n            })];\n        }\n      });\n    });\n  };\n\n  ServerSentEventsTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.eventSource) {\n          return [2\n          /*return*/\n          , Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n\n        return [2\n        /*return*/\n        , sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n\n  ServerSentEventsTransport.prototype.stop = function () {\n    this.close();\n    return Promise.resolve();\n  };\n\n  ServerSentEventsTransport.prototype.close = function (e) {\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = null;\n\n      if (this.onclose) {\n        this.onclose(e);\n      }\n    }\n  };\n\n  return ServerSentEventsTransport;\n}();\n\nexport { ServerSentEventsTransport };","map":{"version":3,"mappings":"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","names":["LogLevel","TransferFormat","Arg","getDataDetail","sendMessage","httpClient","accessTokenFactory","logger","logMessageContent","ServerSentEventsTransport","url","transferFormat","isRequired","isIn","EventSource","Error","log","Trace","token","_a","indexOf","encodeURIComponent","Promise","resolve","reject","opened","Text","eventSource","withCredentials","onmessage","e","_this","onreceive","data","error","onclose","onerror","message","close","onopen","Information"],"sourceRoot":"","sources":["../../src/ServerSentEventsTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            throw new Error(\"'EventSource' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const eventSource = new EventSource(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    const error = new Error(e.message || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}