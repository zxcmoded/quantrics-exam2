{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\"; // tslint:disable:object-literal-sort-keys\n\nvar LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\n\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  var mapping = LogLevelNameMapping[name.toLowerCase()];\n\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(\"Unknown log level: \" + name);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\n\n\nvar HubConnectionBuilder =\n/** @class */\nfunction () {\n  function HubConnectionBuilder() {}\n\n  HubConnectionBuilder.prototype.configureLogging = function (logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      var logLevel = parseLogLevel(logging);\n      this.logger = new ConsoleLogger(logLevel);\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  };\n\n  HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = __assign({}, this.httpConnectionOptions, transportTypeOrOptions);\n    } else {\n      this.httpConnectionOptions = __assign({}, this.httpConnectionOptions, {\n        transport: transportTypeOrOptions\n      });\n    }\n\n    return this;\n  };\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  };\n\n  HubConnectionBuilder.prototype.withAutomaticReconnect = function (retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n\n    return this;\n  };\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n\n\n  HubConnectionBuilder.prototype.build = function () {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    var httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    var connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n  };\n\n  return HubConnectionBuilder;\n}();\n\nexport { HubConnectionBuilder };\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"mappings":"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","names":["DefaultReconnectPolicy","HttpConnection","HubConnection","LogLevel","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","LogLevelNameMapping","trace","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","name","mapping","toLowerCase","HubConnectionBuilder","logging","isRequired","isLogger","logger","logLevel","parseLogLevel","url","transportTypeOrOptions","httpConnectionOptions","__assign","transport","protocol","retryDelaysOrReconnectPolicy","reconnectPolicy","Array","isArray","undefined","connection","create","instance","log"],"sourceRoot":"","sources":["../../src/HubConnectionBuilder.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}