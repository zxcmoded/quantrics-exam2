{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Subject } from \"./Subject\";\nimport { Arg } from \"./Utils\";\nvar DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nvar DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\n/** Describes the current state of the {@link HubConnection} to the server. */\n\nexport var HubConnectionState;\n\n(function (HubConnectionState) {\n  /** The hub connection is disconnected. */\n  HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /** The hub connection is connecting. */\n\n  HubConnectionState[\"Connecting\"] = \"Connecting\";\n  /** The hub connection is connected. */\n\n  HubConnectionState[\"Connected\"] = \"Connected\";\n  /** The hub connection is disconnecting. */\n\n  HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n  /** The hub connection is reconnecting. */\n\n  HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */\n\n\nvar HubConnection =\n/** @class */\nfunction () {\n  function HubConnection(connection, logger, protocol, reconnectPolicy) {\n    var _this = this;\n\n    this.nextKeepAlive = 0;\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\n    this.logger = logger;\n    this.protocol = protocol;\n    this.connection = connection;\n    this.reconnectPolicy = reconnectPolicy;\n    this.handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = function (data) {\n      return _this.processIncomingData(data);\n    };\n\n    this.connection.onclose = function (error) {\n      return _this.connectionClosed(error);\n    };\n\n    this.callbacks = {};\n    this.methods = {};\n    this.closedCallbacks = [];\n    this.reconnectingCallbacks = [];\n    this.reconnectedCallbacks = [];\n    this.invocationId = 0;\n    this.receivedHandshakeResponse = false;\n    this.connectionState = HubConnectionState.Disconnected;\n    this.connectionStarted = false;\n    this.cachedPingMessage = this.protocol.writeMessage({\n      type: MessageType.Ping\n    });\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  HubConnection.create = function (connection, logger, protocol, reconnectPolicy) {\n    return new HubConnection(connection, logger, protocol, reconnectPolicy);\n  };\n\n  Object.defineProperty(HubConnection.prototype, \"state\", {\n    /** Indicates the state of the {@link HubConnection} to the server. */\n    get: function () {\n      return this.connectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HubConnection.prototype, \"connectionId\", {\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\n    get: function () {\n      return this.connection ? this.connection.connectionId || null : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HubConnection.prototype, \"baseUrl\", {\n    /** Indicates the url of the {@link HubConnection} to the server. */\n    get: function () {\n      return this.connection.baseUrl || \"\";\n    },\n\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\n    set: function (url) {\n      if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\n        throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n      }\n\n      if (!url) {\n        throw new Error(\"The HubConnection url must be a valid url.\");\n      }\n\n      this.connection.baseUrl = url;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n  HubConnection.prototype.start = function () {\n    this.startPromise = this.startWithStateTransitions();\n    return this.startPromise;\n  };\n\n  HubConnection.prototype.startWithStateTransitions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.connectionState !== HubConnectionState.Disconnected) {\n              return [2\n              /*return*/\n              , Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"))];\n            }\n\n            this.connectionState = HubConnectionState.Connecting;\n            this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.startInternal()];\n\n          case 2:\n            _a.sent();\n\n            this.connectionState = HubConnectionState.Connected;\n            this.connectionStarted = true;\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            this.connectionState = HubConnectionState.Disconnected;\n            this.logger.log(LogLevel.Debug, \"HubConnection failed to start successfully because of error '\" + e_1 + \"'.\");\n            return [2\n            /*return*/\n            , Promise.reject(e_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HubConnection.prototype.startInternal = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var handshakePromise, handshakeRequest, e_2;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.stopDuringStartError = undefined;\n            this.receivedHandshakeResponse = false;\n            handshakePromise = new Promise(function (resolve, reject) {\n              _this.handshakeResolver = resolve;\n              _this.handshakeRejecter = reject;\n            });\n            return [4\n            /*yield*/\n            , this.connection.start(this.protocol.transferFormat)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 5,, 7]);\n\n            handshakeRequest = {\n              protocol: this.protocol.name,\n              version: this.protocol.version\n            };\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\n            return [4\n            /*yield*/\n            , this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];\n\n          case 3:\n            _a.sent();\n\n            this.logger.log(LogLevel.Information, \"Using HubProtocol '\" + this.protocol.name + \"'.\"); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n            this.cleanupTimeout();\n            this.resetTimeoutPeriod();\n            this.resetKeepAliveInterval();\n            return [4\n            /*yield*/\n            , handshakePromise];\n\n          case 4:\n            _a.sent(); // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\n            // and the connection was closed.\n\n\n            if (this.stopDuringStartError) {\n              // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n              // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n              // will cause the calling continuation to get scheduled to run later.\n              throw this.stopDuringStartError;\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_2 = _a.sent();\n            this.logger.log(LogLevel.Debug, \"Hub handshake failed with error '\" + e_2 + \"' during start(). Stopping HubConnection.\");\n            this.cleanupTimeout();\n            this.cleanupPingTimer(); // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n\n            return [4\n            /*yield*/\n            , this.connection.stop(e_2)];\n\n          case 6:\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n            _a.sent();\n\n            throw e_2;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var startPromise, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startPromise = this.startPromise;\n            this.stopPromise = this.stopInternal();\n            return [4\n            /*yield*/\n            , this.stopPromise];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]); // Awaiting undefined continues immediately\n\n\n            return [4\n            /*yield*/\n            , startPromise];\n\n          case 3:\n            // Awaiting undefined continues immediately\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            e_3 = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HubConnection.prototype.stopInternal = function (error) {\n    if (this.connectionState === HubConnectionState.Disconnected) {\n      this.logger.log(LogLevel.Debug, \"Call to HubConnection.stop(\" + error + \") ignored because it is already in the disconnected state.\");\n      return Promise.resolve();\n    }\n\n    if (this.connectionState === HubConnectionState.Disconnecting) {\n      this.logger.log(LogLevel.Debug, \"Call to HttpConnection.stop(\" + error + \") ignored because the connection is already in the disconnecting state.\");\n      return this.stopPromise;\n    }\n\n    this.connectionState = HubConnectionState.Disconnecting;\n    this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n\n    if (this.reconnectDelayHandle) {\n      // We're in a reconnect delay which means the underlying connection is currently already stopped.\n      // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n      // fire the onclose callbacks.\n      this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n      clearTimeout(this.reconnectDelayHandle);\n      this.reconnectDelayHandle = undefined;\n      this.completeClose();\n      return Promise.resolve();\n    }\n\n    this.cleanupTimeout();\n    this.cleanupPingTimer();\n    this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\"); // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n    // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n    // to the disconnected state if need be before HttpConnection.stop() completes.\n\n    return this.connection.stop(error);\n  };\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  HubConnection.prototype.stream = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var _a = this.replaceStreamingParams(args),\n        streams = _a[0],\n        streamIds = _a[1];\n\n    var invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\n    var promiseQueue;\n    var subject = new Subject();\n\n    subject.cancelCallback = function () {\n      var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);\n\n      delete _this.callbacks[invocationDescriptor.invocationId];\n      return promiseQueue.then(function () {\n        return _this.sendWithProtocol(cancelInvocation);\n      });\n    };\n\n    this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n      if (error) {\n        subject.error(error);\n        return;\n      } else if (invocationEvent) {\n        // invocationEvent will not be null when an error is not passed to the callback\n        if (invocationEvent.type === MessageType.Completion) {\n          if (invocationEvent.error) {\n            subject.error(new Error(invocationEvent.error));\n          } else {\n            subject.complete();\n          }\n        } else {\n          subject.next(invocationEvent.item);\n        }\n      }\n    };\n\n    promiseQueue = this.sendWithProtocol(invocationDescriptor).catch(function (e) {\n      subject.error(e);\n      delete _this.callbacks[invocationDescriptor.invocationId];\n    });\n    this.launchStreams(streams, promiseQueue);\n    return subject;\n  };\n\n  HubConnection.prototype.sendMessage = function (message) {\n    this.resetKeepAliveInterval();\n    return this.connection.send(message);\n  };\n  /**\r\n   * Sends a js object to the server.\r\n   * @param message The js object to serialize and send.\r\n   */\n\n\n  HubConnection.prototype.sendWithProtocol = function (message) {\n    return this.sendMessage(this.protocol.writeMessage(message));\n  };\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.send = function (methodName) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var _a = this.replaceStreamingParams(args),\n        streams = _a[0],\n        streamIds = _a[1];\n\n    var sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\n    this.launchStreams(streams, sendPromise);\n    return sendPromise;\n  };\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.invoke = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var _a = this.replaceStreamingParams(args),\n        streams = _a[0],\n        streamIds = _a[1];\n\n    var invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\n    var p = new Promise(function (resolve, reject) {\n      // invocationId will always have a value for a non-blocking invocation\n      _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n        if (error) {\n          reject(error);\n          return;\n        } else if (invocationEvent) {\n          // invocationEvent will not be null when an error is not passed to the callback\n          if (invocationEvent.type === MessageType.Completion) {\n            if (invocationEvent.error) {\n              reject(new Error(invocationEvent.error));\n            } else {\n              resolve(invocationEvent.result);\n            }\n          } else {\n            reject(new Error(\"Unexpected message type: \" + invocationEvent.type));\n          }\n        }\n      };\n\n      var promiseQueue = _this.sendWithProtocol(invocationDescriptor).catch(function (e) {\n        reject(e); // invocationId will always have a value for a non-blocking invocation\n\n        delete _this.callbacks[invocationDescriptor.invocationId];\n      });\n\n      _this.launchStreams(streams, promiseQueue);\n    });\n    return p;\n  };\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  HubConnection.prototype.on = function (methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this.methods[methodName]) {\n      this.methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this.methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this.methods[methodName].push(newMethod);\n  };\n\n  HubConnection.prototype.off = function (methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    var handlers = this.methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      var removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this.methods[methodName];\n        }\n      }\n    } else {\n      delete this.methods[methodName];\n    }\n  };\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  HubConnection.prototype.onclose = function (callback) {\n    if (callback) {\n      this.closedCallbacks.push(callback);\n    }\n  };\n  /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n   */\n\n\n  HubConnection.prototype.onreconnecting = function (callback) {\n    if (callback) {\n      this.reconnectingCallbacks.push(callback);\n    }\n  };\n  /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n   */\n\n\n  HubConnection.prototype.onreconnected = function (callback) {\n    if (callback) {\n      this.reconnectedCallbacks.push(callback);\n    }\n  };\n\n  HubConnection.prototype.processIncomingData = function (data) {\n    this.cleanupTimeout();\n\n    if (!this.receivedHandshakeResponse) {\n      data = this.processHandshakeResponse(data);\n      this.receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      var messages = this.protocol.parseMessages(data, this.logger);\n\n      for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n        var message = messages_1[_i];\n\n        switch (message.type) {\n          case MessageType.Invocation:\n            this.invokeClientMethod(message);\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            var callback = this.callbacks[message.invocationId];\n\n            if (callback) {\n              if (message.type === MessageType.Completion) {\n                delete this.callbacks[message.invocationId];\n              }\n\n              callback(message);\n            }\n\n            break;\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            this.logger.log(LogLevel.Information, \"Close message received from server.\");\n            var error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n\n            if (message.allowReconnect === true) {\n              // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n              // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n              // tslint:disable-next-line:no-floating-promises\n              this.connection.stop(error);\n            } else {\n              // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n              this.stopPromise = this.stopInternal(error);\n            }\n\n            break;\n\n          default:\n            this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type + \".\");\n            break;\n        }\n      }\n    }\n\n    this.resetTimeoutPeriod();\n  };\n\n  HubConnection.prototype.processHandshakeResponse = function (data) {\n    var _a;\n\n    var responseMessage;\n    var remainingData;\n\n    try {\n      _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];\n    } catch (e) {\n      var message = \"Error parsing handshake response: \" + e;\n      this.logger.log(LogLevel.Error, message);\n      var error = new Error(message);\n      this.handshakeRejecter(error);\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      var message = \"Server returned handshake error: \" + responseMessage.error;\n      this.logger.log(LogLevel.Error, message);\n      var error = new Error(message);\n      this.handshakeRejecter(error);\n      throw error;\n    } else {\n      this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    this.handshakeResolver();\n    return remainingData;\n  };\n\n  HubConnection.prototype.resetKeepAliveInterval = function () {\n    if (this.connection.features.inherentKeepAlive) {\n      return;\n    } // Set the time we want the next keep alive to be sent\n    // Timer will be setup on next message receive\n\n\n    this.nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n    this.cleanupPingTimer();\n  };\n\n  HubConnection.prototype.resetTimeoutPeriod = function () {\n    var _this = this;\n\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this.timeoutHandle = setTimeout(function () {\n        return _this.serverTimeout();\n      }, this.serverTimeoutInMilliseconds); // Set keepAlive timer if there isn't one\n\n      if (this.pingServerHandle === undefined) {\n        var nextPing = this.nextKeepAlive - new Date().getTime();\n\n        if (nextPing < 0) {\n          nextPing = 0;\n        } // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n\n\n        this.pingServerHandle = setTimeout(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  if (!(this.connectionState === HubConnectionState.Connected)) return [3\n                  /*break*/\n                  , 4];\n                  _b.label = 1;\n\n                case 1:\n                  _b.trys.push([1, 3,, 4]);\n\n                  return [4\n                  /*yield*/\n                  , this.sendMessage(this.cachedPingMessage)];\n\n                case 2:\n                  _b.sent();\n\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 3:\n                  _a = _b.sent(); // We don't care about the error. It should be seen elsewhere in the client.\n                  // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n\n                  this.cleanupPingTimer();\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 4:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, nextPing);\n      }\n    }\n  };\n\n  HubConnection.prototype.serverTimeout = function () {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n    // tslint:disable-next-line:no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  };\n\n  HubConnection.prototype.invokeClientMethod = function (invocationMessage) {\n    var _this = this;\n\n    var methods = this.methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      try {\n        methods.forEach(function (m) {\n          return m.apply(_this, invocationMessage.arguments);\n        });\n      } catch (e) {\n        this.logger.log(LogLevel.Error, \"A callback for the method \" + invocationMessage.target.toLowerCase() + \" threw error '\" + e + \"'.\");\n      }\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        var message = \"Server requested a response, which is not supported in this version of the client.\";\n        this.logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n\n        this.stopPromise = this.stopInternal(new Error(message));\n      }\n    } else {\n      this.logger.log(LogLevel.Warning, \"No client method with the name '\" + invocationMessage.target + \"' found.\");\n    }\n  };\n\n  HubConnection.prototype.connectionClosed = function (error) {\n    this.logger.log(LogLevel.Debug, \"HubConnection.connectionClosed(\" + error + \") called while in state \" + this.connectionState + \".\"); // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n\n    this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\"); // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n    // If it has already completed, this should just noop.\n\n    if (this.handshakeResolver) {\n      this.handshakeResolver();\n    }\n\n    this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n    this.cleanupTimeout();\n    this.cleanupPingTimer();\n\n    if (this.connectionState === HubConnectionState.Disconnecting) {\n      this.completeClose(error);\n    } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\n      // tslint:disable-next-line:no-floating-promises\n      this.reconnect(error);\n    } else if (this.connectionState === HubConnectionState.Connected) {\n      this.completeClose(error);\n    } // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n\n  };\n\n  HubConnection.prototype.completeClose = function (error) {\n    var _this = this;\n\n    if (this.connectionStarted) {\n      this.connectionState = HubConnectionState.Disconnected;\n      this.connectionStarted = false;\n\n      try {\n        this.closedCallbacks.forEach(function (c) {\n          return c.apply(_this, [error]);\n        });\n      } catch (e) {\n        this.logger.log(LogLevel.Error, \"An onclose callback called with error '\" + error + \"' threw error '\" + e + \"'.\");\n      }\n    }\n  };\n\n  HubConnection.prototype.reconnect = function (error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reconnectStartTime, previousReconnectAttempts, retryError, nextRetryDelay, e_4;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reconnectStartTime = Date.now();\n            previousReconnectAttempts = 0;\n            retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n            nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n\n            if (nextRetryDelay === null) {\n              this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n              this.completeClose(error);\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.connectionState = HubConnectionState.Reconnecting;\n\n            if (error) {\n              this.logger.log(LogLevel.Information, \"Connection reconnecting because of error '\" + error + \"'.\");\n            } else {\n              this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\n            }\n\n            if (this.onreconnecting) {\n              try {\n                this.reconnectingCallbacks.forEach(function (c) {\n                  return c.apply(_this, [error]);\n                });\n              } catch (e) {\n                this.logger.log(LogLevel.Error, \"An onreconnecting callback called with error '\" + error + \"' threw error '\" + e + \"'.\");\n              } // Exit early if an onreconnecting callback called connection.stop().\n\n\n              if (this.connectionState !== HubConnectionState.Reconnecting) {\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n                return [2\n                /*return*/\n                ];\n              }\n            }\n\n            _a.label = 1;\n\n          case 1:\n            if (!(nextRetryDelay !== null)) return [3\n            /*break*/\n            , 7];\n            this.logger.log(LogLevel.Information, \"Reconnect attempt number \" + previousReconnectAttempts + \" will start in \" + nextRetryDelay + \" ms.\");\n            return [4\n            /*yield*/\n            , new Promise(function (resolve) {\n              _this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n            })];\n\n          case 2:\n            _a.sent();\n\n            this.reconnectDelayHandle = undefined;\n\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\n              this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.startInternal()];\n\n          case 4:\n            _a.sent();\n\n            this.connectionState = HubConnectionState.Connected;\n            this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\n\n            if (this.onreconnected) {\n              try {\n                this.reconnectedCallbacks.forEach(function (c) {\n                  return c.apply(_this, [_this.connection.connectionId]);\n                });\n              } catch (e) {\n                this.logger.log(LogLevel.Error, \"An onreconnected callback called with connectionId '\" + this.connection.connectionId + \"; threw error '\" + e + \"'.\");\n              }\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            e_4 = _a.sent();\n            this.logger.log(LogLevel.Information, \"Reconnect attempt failed because of error '\" + e_4 + \"'.\");\n\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\n              this.logger.log(LogLevel.Debug, \"Connection moved to the '\" + this.connectionState + \"' from the reconnecting state during reconnect attempt. Done reconnecting.\"); // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n\n              if (this.connectionState === HubConnectionState.Disconnecting) {\n                this.completeClose();\n              }\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            retryError = e_4 instanceof Error ? e_4 : new Error(e_4.toString());\n            nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            this.logger.log(LogLevel.Information, \"Reconnect retries have been exhausted after \" + (Date.now() - reconnectStartTime) + \" ms and \" + previousReconnectAttempts + \" failed attempts. Connection disconnecting.\");\n            this.completeClose();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  HubConnection.prototype.getNextRetryDelay = function (previousRetryCount, elapsedMilliseconds, retryReason) {\n    try {\n      return this.reconnectPolicy.nextRetryDelayInMilliseconds({\n        elapsedMilliseconds: elapsedMilliseconds,\n        previousRetryCount: previousRetryCount,\n        retryReason: retryReason\n      });\n    } catch (e) {\n      this.logger.log(LogLevel.Error, \"IRetryPolicy.nextRetryDelayInMilliseconds(\" + previousRetryCount + \", \" + elapsedMilliseconds + \") threw error '\" + e + \"'.\");\n      return null;\n    }\n  };\n\n  HubConnection.prototype.cancelCallbacksWithError = function (error) {\n    var callbacks = this.callbacks;\n    this.callbacks = {};\n    Object.keys(callbacks).forEach(function (key) {\n      var callback = callbacks[key];\n      callback(null, error);\n    });\n  };\n\n  HubConnection.prototype.cleanupPingTimer = function () {\n    if (this.pingServerHandle) {\n      clearTimeout(this.pingServerHandle);\n      this.pingServerHandle = undefined;\n    }\n  };\n\n  HubConnection.prototype.cleanupTimeout = function () {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  };\n\n  HubConnection.prototype.createInvocation = function (methodName, args, nonblocking, streamIds) {\n    if (nonblocking) {\n      return {\n        arguments: args,\n        streamIds: streamIds,\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    } else {\n      var invocationId = this.invocationId;\n      this.invocationId++;\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        streamIds: streamIds,\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    }\n  };\n\n  HubConnection.prototype.launchStreams = function (streams, promiseQueue) {\n    var _this = this;\n\n    if (streams.length === 0) {\n      return;\n    } // Synchronize stream data so they arrive in-order on the server\n\n\n    if (!promiseQueue) {\n      promiseQueue = Promise.resolve();\n    }\n\n    var _loop_1 = function (streamId) {\n      streams[streamId].subscribe({\n        complete: function () {\n          promiseQueue = promiseQueue.then(function () {\n            return _this.sendWithProtocol(_this.createCompletionMessage(streamId));\n          });\n        },\n        error: function (err) {\n          var message;\n\n          if (err instanceof Error) {\n            message = err.message;\n          } else if (err && err.toString) {\n            message = err.toString();\n          } else {\n            message = \"Unknown error\";\n          }\n\n          promiseQueue = promiseQueue.then(function () {\n            return _this.sendWithProtocol(_this.createCompletionMessage(streamId, message));\n          });\n        },\n        next: function (item) {\n          promiseQueue = promiseQueue.then(function () {\n            return _this.sendWithProtocol(_this.createStreamItemMessage(streamId, item));\n          });\n        }\n      });\n    }; // We want to iterate over the keys, since the keys are the stream ids\n    // tslint:disable-next-line:forin\n\n\n    for (var streamId in streams) {\n      _loop_1(streamId);\n    }\n  };\n\n  HubConnection.prototype.replaceStreamingParams = function (args) {\n    var streams = [];\n    var streamIds = [];\n\n    for (var i = 0; i < args.length; i++) {\n      var argument = args[i];\n\n      if (this.isObservable(argument)) {\n        var streamId = this.invocationId;\n        this.invocationId++; // Store the stream for later use\n\n        streams[streamId] = argument;\n        streamIds.push(streamId.toString()); // remove stream from args\n\n        args.splice(i, 1);\n      }\n    }\n\n    return [streams, streamIds];\n  };\n\n  HubConnection.prototype.isObservable = function (arg) {\n    // This allows other stream implementations to just work (like rxjs)\n    return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n  };\n\n  HubConnection.prototype.createStreamInvocation = function (methodName, args, streamIds) {\n    var invocationId = this.invocationId;\n    this.invocationId++;\n    return {\n      arguments: args,\n      invocationId: invocationId.toString(),\n      streamIds: streamIds,\n      target: methodName,\n      type: MessageType.StreamInvocation\n    };\n  };\n\n  HubConnection.prototype.createCancelInvocation = function (id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  };\n\n  HubConnection.prototype.createStreamItemMessage = function (id, item) {\n    return {\n      invocationId: id,\n      item: item,\n      type: MessageType.StreamItem\n    };\n  };\n\n  HubConnection.prototype.createCompletionMessage = function (id, error, result) {\n    if (error) {\n      return {\n        error: error,\n        invocationId: id,\n        type: MessageType.Completion\n      };\n    }\n\n    return {\n      invocationId: id,\n      result: result,\n      type: MessageType.Completion\n    };\n  };\n\n  return HubConnection;\n}();\n\nexport { HubConnection };","map":{"version":3,"mappings":"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","names":["HandshakeProtocol","MessageType","LogLevel","Subject","Arg","DEFAULT_TIMEOUT_IN_MS","DEFAULT_PING_INTERVAL_IN_MS","HubConnectionState","connection","logger","protocol","reconnectPolicy","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","handshakeProtocol","onreceive","data","processIncomingData","onclose","error","connectionClosed","callbacks","methods","closedCallbacks","reconnectingCallbacks","reconnectedCallbacks","invocationId","receivedHandshakeResponse","connectionState","Disconnected","connectionStarted","cachedPingMessage","writeMessage","type","Ping","HubConnection","Object","connectionId","baseUrl","url","Reconnecting","Error","startPromise","startWithStateTransitions","Promise","reject","Connecting","log","Debug","startInternal","_a","Connected","e_1","stopDuringStartError","undefined","handshakePromise","resolve","_this","handshakeResolver","handshakeRejecter","start","transferFormat","handshakeRequest","name","version","sendMessage","writeHandshakeRequest","Information","cleanupTimeout","resetTimeoutPeriod","resetKeepAliveInterval","e_2","cleanupPingTimer","stop","stopPromise","stopInternal","Disconnecting","reconnectDelayHandle","clearTimeout","completeClose","methodName","args","streams","streamIds","invocationDescriptor","createStreamInvocation","promiseQueue","subject","cancelCallback","cancelInvocation","createCancelInvocation","then","sendWithProtocol","invocationEvent","Completion","complete","next","item","catch","e","launchStreams","message","send","sendPromise","createInvocation","p","result","newMethod","toLowerCase","indexOf","push","method","handlers","removeIdx","splice","length","callback","processHandshakeResponse","messages","parseMessages","_i","Invocation","invokeClientMethod","StreamItem","Close","allowReconnect","Warning","responseMessage","remainingData","features","inherentKeepAlive","nextKeepAlive","Date","getTime","timeoutHandle","setTimeout","serverTimeout","pingServerHandle","nextPing","_b","invocationMessage","target","forEach","m","apply","arguments","cancelCallbacksWithError","reconnect","c","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","getNextRetryDelay","onreconnecting","onreconnected","e_4","toString","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","keys","key","nonblocking","streamId","subscribe","createCompletionMessage","err","createStreamItemMessage","i","argument","isObservable","arg","StreamInvocation","id","CancelInvocation"],"sourceRoot":"","sources":["../../src/HubConnection.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private readonly reconnectPolicy?: IRetryPolicy;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private invocationId: number;\r\n\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectingCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectedCallbacks: Array<(connectionId?: string) => void>;\r\n\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private stopDuringStartError?: Error;\r\n\r\n    private connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private startPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private reconnectDelayHandle?: any;\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.reconnectPolicy = reconnectPolicy;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.reconnectingCallbacks = [];\r\n        this.reconnectedCallbacks = [];\r\n        this.invocationId = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this.startPromise = this.startWithStateTransitions();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startWithStateTransitions(): Promise<void> {\r\n        if (this.connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Connecting;\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this.startInternal();\r\n\r\n            this.connectionState = HubConnectionState.Connected;\r\n            this.connectionStarted = true;\r\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async startInternal() {\r\n        this.stopDuringStartError = undefined;\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this.protocol.name,\r\n                version: this.protocol.version,\r\n            };\r\n\r\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this.cleanupTimeout();\r\n            this.resetTimeoutPeriod();\r\n            this.resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this.stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this.stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this.cleanupTimeout();\r\n            this.cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this.startPromise;\r\n\r\n        this.stopPromise = this.stopInternal();\r\n        await this.stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private stopInternal(error?: Error): Promise<void> {\r\n        if (this.connectionState === HubConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise!;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this.reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this.reconnectDelayHandle);\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            this.completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this.launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private sendWithProtocol(message: any) {\r\n        return this.sendMessage(this.protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\r\n\r\n        this.launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this.launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this.reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this.stopPromise = this.stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this.nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this.cleanupPingTimer();\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this.pingServerHandle === undefined) {\r\n                let nextPing = this.nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this.pingServerHandle = setTimeout(async () => {\r\n                    if (this.connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this.sendMessage(this.cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this.cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this.stopPromise = this.stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this.handshakeResolver) {\r\n            this.handshakeResolver();\r\n        }\r\n\r\n        this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.completeClose(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.reconnect(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected) {\r\n            this.completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private completeClose(error?: Error) {\r\n        if (this.connectionStarted) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this.completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this.onreconnecting) {\r\n            try {\r\n                this.reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this.logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.startInternal();\r\n\r\n                this.connectionState = HubConnectionState.Connected;\r\n                this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this.onreconnected) {\r\n                    try {\r\n                        this.reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this.logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                    this.logger.log(LogLevel.Debug, `Connection moved to the '${this.connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this.connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this.completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this.logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this.completeClose();\r\n    }\r\n\r\n    private getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this.reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n            this.pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const invocationId = this.invocationId;\r\n            this.invocationId++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private launchStreams(streams: Array<IStreamResult<any>>, promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private replaceStreamingParams(args: any[]): [Array<IStreamResult<any>>, string[]] {\r\n        const streams: Array<IStreamResult<any>> = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this.isObservable(argument)) {\r\n                const streamId = this.invocationId;\r\n                this.invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this.invocationId;\r\n        this.invocationId++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: invocationId.toString(),\r\n            streamIds,\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}