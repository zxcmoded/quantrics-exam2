{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// Not exported from index\n\n/** @private */\nvar TextMessageFormat =\n/** @class */\nfunction () {\n  function TextMessageFormat() {}\n\n  TextMessageFormat.write = function (output) {\n    return \"\" + output + TextMessageFormat.RecordSeparator;\n  };\n\n  TextMessageFormat.parse = function (input) {\n    if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n      throw new Error(\"Message is incomplete.\");\n    }\n\n    var messages = input.split(TextMessageFormat.RecordSeparator);\n    messages.pop();\n    return messages;\n  };\n\n  TextMessageFormat.RecordSeparatorCode = 0x1e;\n  TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\n  return TextMessageFormat;\n}();\n\nexport { TextMessageFormat };","map":{"version":3,"mappings":";;AAAA;AACA;AAEA;;AACA;AACA;AAAA;AAAA;EAAA,8BAiBC;;EAbiBA,0BAAd,UAAoBC,MAApB,EAAkC;IAC9B,OAAO,KAAGA,MAAH,GAAYD,iBAAiB,CAACE,eAArC;EACH,CAFa;;EAIAF,0BAAd,UAAoBG,KAApB,EAAiC;IAC7B,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAL,KAA4BJ,iBAAiB,CAACE,eAAlD,EAAmE;MAC/D,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;IACH;;IAED,IAAMC,QAAQ,GAAGH,KAAK,CAACI,KAAN,CAAYP,iBAAiB,CAACE,eAA9B,CAAjB;IACAI,QAAQ,CAACE,GAAT;IACA,OAAOF,QAAP;EACH,CARa;;EAPAN,wCAAsB,IAAtB;EACAA,oCAAkBS,MAAM,CAACC,YAAP,CAAoBV,iBAAiB,CAACW,mBAAtC,CAAlB;EAelB;AAAC,CAjBD;;SAAaX","names":["TextMessageFormat","output","RecordSeparator","input","length","Error","messages","split","pop","String","fromCharCode","RecordSeparatorCode"],"sourceRoot":"","sources":["../../src/TextMessageFormat.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}