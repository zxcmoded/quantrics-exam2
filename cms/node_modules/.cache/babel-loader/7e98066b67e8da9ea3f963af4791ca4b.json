{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\n// it's a very new API right now.\n// Not exported from index.\n\n/** @private */\nvar AbortController =\n/** @class */\nfunction () {\n  function AbortController() {\n    this.isAborted = false;\n  }\n\n  AbortController.prototype.abort = function () {\n    if (!this.isAborted) {\n      this.isAborted = true;\n\n      if (this.onabort) {\n        this.onabort();\n      }\n    }\n  };\n\n  Object.defineProperty(AbortController.prototype, \"signal\", {\n    get: function () {\n      return this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AbortController.prototype, \"aborted\", {\n    get: function () {\n      return this.isAborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AbortController;\n}();\n\nexport { AbortController };","map":{"version":3,"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AAAA;AAAA;EAAA;IACY,iBAAqB,KAArB;EAmBX;;EAhBUA,kCAAP;IACI,IAAI,CAAC,KAAKC,SAAV,EAAqB;MACjB,KAAKA,SAAL,GAAiB,IAAjB;;MACA,IAAI,KAAKC,OAAT,EAAkB;QACd,KAAKA,OAAL;MACH;IACJ;EACJ,CAPM;;EASPC,sBAAIH,yBAAJ,EAAI,QAAJ,EAAU;SAAV;MACI,OAAO,IAAP;IACH,CAFS;oBAAA;;EAAA,CAAV;EAIAG,sBAAIH,yBAAJ,EAAI,SAAJ,EAAW;SAAX;MACI,OAAO,KAAKC,SAAZ;IACH,CAFU;oBAAA;;EAAA,CAAX;EAGJ;AAAC,CApBD","names":["AbortController","isAborted","onabort","Object"],"sourceRoot":"","sources":["../../src/AbortController.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: () => void;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: () => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}