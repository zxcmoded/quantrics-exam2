{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\nimport { LogLevel } from \"./ILogger\";\n\nvar XhrHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(XhrHttpClient, _super);\n\n  function XhrHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    _this.logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  XhrHttpClient.prototype.send = function (request) {\n    var _this = this; // Check that abort was not signaled before calling send\n\n\n    if (request.abortSignal && request.abortSignal.aborted) {\n      return Promise.reject(new AbortError());\n    }\n\n    if (!request.method) {\n      return Promise.reject(new Error(\"No method defined.\"));\n    }\n\n    if (!request.url) {\n      return Promise.reject(new Error(\"No url defined.\"));\n    }\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      var headers = request.headers;\n\n      if (headers) {\n        Object.keys(headers).forEach(function (header) {\n          xhr.setRequestHeader(header, headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = function () {\n          xhr.abort();\n          reject(new AbortError());\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = function () {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = function () {\n        _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + xhr.status + \": \" + xhr.statusText + \".\");\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = function () {\n        _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content || \"\");\n    });\n  };\n\n  return XhrHttpClient;\n}(HttpClient);\n\nexport { XhrHttpClient };","map":{"version":3,"mappings":"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","names":["AbortError","HttpError","TimeoutError","HttpClient","HttpResponse","LogLevel","__extends","logger","_super","_this","XhrHttpClient","request","abortSignal","aborted","Promise","reject","method","Error","url","resolve","xhr","XMLHttpRequest","open","withCredentials","setRequestHeader","headers","Object","keys","forEach","header","responseType","onabort","abort","timeout","onload","status","statusText","response","responseText","onerror","log","Warning","ontimeout","send","content"],"sourceRoot":"","sources":["../../src/XhrHttpClient.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}