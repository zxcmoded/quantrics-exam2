{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.error.cause.js\";\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nimport { isArrayBuffer } from \"./Utils\";\n/** @private */\n\nvar HandshakeProtocol =\n/** @class */\nfunction () {\n  function HandshakeProtocol() {} // Handshake request is always JSON\n\n\n  HandshakeProtocol.prototype.writeHandshakeRequest = function (handshakeRequest) {\n    return TextMessageFormat.write(JSON.stringify(handshakeRequest));\n  };\n\n  HandshakeProtocol.prototype.parseHandshakeResponse = function (data) {\n    var responseMessage;\n    var messageData;\n    var remainingData;\n\n    if (isArrayBuffer(data) || typeof Buffer !== \"undefined\" && data instanceof Buffer) {\n      // Format is binary but still need to read JSON text from handshake response\n      var binaryData = new Uint8Array(data);\n      var separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\n      remainingData = binaryData.byteLength > responseLength ? binaryData.slice(responseLength).buffer : null;\n    } else {\n      var textData = data;\n      var separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\n\n      if (separatorIndex === -1) {\n        throw new Error(\"Message is incomplete.\");\n      } // content before separator is handshake response\n      // optional content after is additional messages\n\n\n      var responseLength = separatorIndex + 1;\n      messageData = textData.substring(0, responseLength);\n      remainingData = textData.length > responseLength ? textData.substring(responseLength) : null;\n    } // At this point we should have just the single handshake message\n\n\n    var messages = TextMessageFormat.parse(messageData);\n    var response = JSON.parse(messages[0]);\n\n    if (response.type) {\n      throw new Error(\"Expected a handshake response from the server.\");\n    }\n\n    responseMessage = response; // multiple messages could have arrived with handshake\n    // return additional data to be parsed as usual, or null if all parsed\n\n    return [remainingData, responseMessage];\n  };\n\n  return HandshakeProtocol;\n}();\n\nexport { HandshakeProtocol };","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAEA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,aAAT,QAA8B,SAA9B;AAcA;;AACA;AAAA;AAAA;EAAA,8BAkDC,CAlDD,CACI;;;EACOC,oDAAP,UAA6BC,gBAA7B,EAAsE;IAClE,OAAOH,iBAAiB,CAACI,KAAlB,CAAwBC,IAAI,CAACC,SAAL,CAAeH,gBAAf,CAAxB,CAAP;EACH,CAFM;;EAIAD,qDAAP,UAA8BK,IAA9B,EAAuC;IACnC,IAAIC,eAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,aAAJ;;IAEA,IAAIT,aAAa,CAACM,IAAD,CAAb,IAAwB,OAAOI,MAAP,KAAkB,WAAlB,IAAiCJ,IAAI,YAAYI,MAA7E,EAAsF;MAClF;MACA,IAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeN,IAAf,CAAnB;MACA,IAAMO,cAAc,GAAGF,UAAU,CAACG,OAAX,CAAmBf,iBAAiB,CAACgB,mBAArC,CAAvB;;MACA,IAAIF,cAAc,KAAK,CAAC,CAAxB,EAA2B;QACvB,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACH,CANiF,CAQlF;MACA;;;MACA,IAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAxC;MACAL,WAAW,GAAGU,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCT,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoBJ,cAApB,CAAhC,CAAd;MACAR,aAAa,GAAIE,UAAU,CAACW,UAAX,GAAwBL,cAAzB,GAA2CN,UAAU,CAACU,KAAX,CAAiBJ,cAAjB,EAAiCM,MAA5E,GAAqF,IAArG;IACH,CAbD,MAaO;MACH,IAAMC,QAAQ,GAAWlB,IAAzB;MACA,IAAMO,cAAc,GAAGW,QAAQ,CAACV,OAAT,CAAiBf,iBAAiB,CAAC0B,eAAnC,CAAvB;;MACA,IAAIZ,cAAc,KAAK,CAAC,CAAxB,EAA2B;QACvB,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;MACH,CALE,CAOH;MACA;;;MACA,IAAMC,cAAc,GAAGJ,cAAc,GAAG,CAAxC;MACAL,WAAW,GAAGgB,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBT,cAAtB,CAAd;MACAR,aAAa,GAAIe,QAAQ,CAACG,MAAT,GAAkBV,cAAnB,GAAqCO,QAAQ,CAACE,SAAT,CAAmBT,cAAnB,CAArC,GAA0E,IAA1F;IACH,CA9BkC,CAgCnC;;;IACA,IAAMW,QAAQ,GAAG7B,iBAAiB,CAAC8B,KAAlB,CAAwBrB,WAAxB,CAAjB;IACA,IAAMsB,QAAQ,GAAG1B,IAAI,CAACyB,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAnB,CAAjB;;IACA,IAAIE,QAAQ,CAACC,IAAb,EAAmB;MACf,MAAM,IAAIf,KAAJ,CAAU,gDAAV,CAAN;IACH;;IACDT,eAAe,GAAGuB,QAAlB,CAtCmC,CAwCnC;IACA;;IACA,OAAO,CAACrB,aAAD,EAAgBF,eAAhB,CAAP;EACH,CA3CM;;EA4CX;AAAC,CAlDD","names":["TextMessageFormat","isArrayBuffer","HandshakeProtocol","handshakeRequest","write","JSON","stringify","data","responseMessage","messageData","remainingData","Buffer","binaryData","Uint8Array","separatorIndex","indexOf","RecordSeparatorCode","Error","responseLength","String","fromCharCode","apply","slice","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","response","type"],"sourceRoot":"","sources":["../../src/HandshakeProtocol.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}