{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail } from \"./Utils\";\n/** @private */\n\nvar WebSocketTransport =\n/** @class */\nfunction () {\n  function WebSocketTransport(accessTokenFactory, logger, logMessageContent) {\n    this.logger = logger;\n\n    this.accessTokenFactory = accessTokenFactory || function () {\n      return null;\n    };\n\n    this.logMessageContent = logMessageContent;\n  }\n\n  WebSocketTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n            if (typeof WebSocket === \"undefined\") {\n              throw new Error(\"'WebSocket' is not supported in your environment.\");\n            }\n\n            this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              url = url.replace(/^http/, \"ws\");\n              var webSocket = new WebSocket(url);\n\n              if (transferFormat === TransferFormat.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n              } // tslint:disable-next-line:variable-name\n\n\n              webSocket.onopen = function (_event) {\n                _this.logger.log(LogLevel.Information, \"WebSocket connected to \" + url);\n\n                _this.webSocket = webSocket;\n                resolve();\n              };\n\n              webSocket.onerror = function (event) {\n                reject(event.error);\n              };\n\n              webSocket.onmessage = function (message) {\n                _this.logger.log(LogLevel.Trace, \"(WebSockets transport) data received. \" + getDataDetail(message.data, _this.logMessageContent) + \".\");\n\n                if (_this.onreceive) {\n                  _this.onreceive(message.data);\n                }\n              };\n\n              webSocket.onclose = function (event) {\n                // webSocket will be null if the transport did not start successfully\n                _this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n\n                if (_this.onclose) {\n                  if (event.wasClean === false || event.code !== 1000) {\n                    _this.onclose(new Error(\"Websocket closed with status code: \" + event.code + \" (\" + event.reason + \")\"));\n                  } else {\n                    _this.onclose();\n                  }\n                }\n              };\n            })];\n        }\n      });\n    });\n  };\n\n  WebSocketTransport.prototype.send = function (data) {\n    if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\n      this.logger.log(LogLevel.Trace, \"(WebSockets transport) sending data. \" + getDataDetail(data, this.logMessageContent) + \".\");\n      this.webSocket.send(data);\n      return Promise.resolve();\n    }\n\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  };\n\n  WebSocketTransport.prototype.stop = function () {\n    if (this.webSocket) {\n      this.webSocket.close();\n      this.webSocket = null;\n    }\n\n    return Promise.resolve();\n  };\n\n  return WebSocketTransport;\n}();\n\nexport { WebSocketTransport };","map":{"version":3,"mappings":"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","names":["LogLevel","TransferFormat","Arg","getDataDetail","accessTokenFactory","logger","logMessageContent","WebSocketTransport","url","transferFormat","isRequired","isIn","WebSocket","Error","log","Trace","token","_a","indexOf","encodeURIComponent","Promise","resolve","reject","replace","webSocket","Binary","binaryType","onopen","_event","_this","Information","onerror","event","error","onmessage","message","data","onreceive","onclose","wasClean","code","reason","readyState","OPEN","send","close"],"sourceRoot":"","sources":["../../src/WebSocketTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logMessageContent: boolean;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (WebSocket) === \"undefined\") {\r\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const webSocket = new WebSocket(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: ErrorEvent) => {\r\n                reject(event.error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n                if (this.onclose) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}