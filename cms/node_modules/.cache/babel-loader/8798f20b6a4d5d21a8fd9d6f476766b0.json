{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nvar LongPollingTransport =\n/** @class */\nfunction () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent) {\n    this.httpClient = httpClient;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logger = logger;\n    this.pollAbort = new AbortController();\n    this.logMessageContent = logMessageContent;\n    this.running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  Object.defineProperty(LongPollingTransport.prototype, \"pollAborted\", {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get: function () {\n      return this.pollAbort.aborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LongPollingTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pollOptions, token, pollUrl, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.url = url;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n            if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            }\n\n            pollOptions = {\n              abortSignal: this.pollAbort.signal,\n              headers: {},\n              timeout: 100000\n            };\n\n            if (transferFormat === TransferFormat.Binary) {\n              pollOptions.responseType = \"arraybuffer\";\n            }\n\n            return [4\n            /*yield*/\n            , this.getAccessToken()];\n\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl + \".\");\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode + \".\"); // Mark running as false so that the poll immediately ends and runs the close logic\n\n              this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              this.running = false;\n            } else {\n              this.running = true;\n            }\n\n            this.receiving = this.poll(this.url, pollOptions);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.getAccessToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.updateHeaderToken = function (request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n\n    if (token) {\n      // tslint:disable-next-line:no-string-literal\n      request.headers[\"Authorization\"] = \"Bearer \" + token;\n      return;\n    } // tslint:disable-next-line:no-string-literal\n\n\n    if (request.headers[\"Authorization\"]) {\n      // tslint:disable-next-line:no-string-literal\n      delete request.headers[\"Authorization\"];\n    }\n  };\n\n  LongPollingTransport.prototype.poll = function (url, pollOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, pollUrl, response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 8, 9]);\n\n            _a.label = 1;\n\n          case 1:\n            if (!this.running) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.getAccessToken()];\n\n          case 2:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl + \".\");\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 4:\n            response = _a.sent();\n\n            if (response.statusCode === 204) {\n              this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n              this.running = false;\n            } else if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode + \".\"); // Unexpected status code\n\n              this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              this.running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \" + getDataDetail(response.content, this.logMessageContent) + \".\");\n\n                if (this.onreceive) {\n                  this.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (!this.running) {\n              // Log but disregard errors that occur after stopping\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \" + e_1.message);\n            } else {\n              if (e_1 instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                this.closeError = e_1;\n                this.running = false;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n            if (!this.pollAborted) {\n              this.raiseOnClose();\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.running) {\n          return [2\n          /*return*/\n          , Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n\n        return [2\n        /*return*/\n        , sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteOptions, token;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n            this.running = false;\n            this.pollAbort.abort();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 5, 6]);\n\n            return [4\n            /*yield*/\n            , this.receiving];\n\n          case 2:\n            _a.sent(); // Send DELETE to clean up long polling on the server\n\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \" + this.url + \".\");\n            deleteOptions = {\n              headers: {}\n            };\n            return [4\n            /*yield*/\n            , this.getAccessToken()];\n\n          case 3:\n            token = _a.sent();\n            this.updateHeaderToken(deleteOptions, token);\n            return [4\n            /*yield*/\n            , this.httpClient.delete(this.url, deleteOptions)];\n\n          case 4:\n            _a.sent();\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n            // It needs to happen after the DELETE request is sent\n\n            this.raiseOnClose();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.raiseOnClose = function () {\n    if (this.onclose) {\n      var logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this.closeError) {\n        logMessage += \" Error: \" + this.closeError;\n      }\n\n      this.logger.log(LogLevel.Trace, logMessage);\n      this.onclose(this.closeError);\n    }\n  };\n\n  return LongPollingTransport;\n}();\n\nexport { LongPollingTransport };","map":{"version":3,"mappings":";;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,eAAT,QAAgC,mBAAhC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,UAAxC;AAEA,SAAkBC,QAAlB,QAAkC,WAAlC;AACA,SAAqBC,cAArB,QAA2C,cAA3C;AACA,SAASC,GAAT,EAAcC,aAAd,EAA6BC,WAA7B,QAAgD,SAAhD,C,CAEA;;AACA;;AACA;AAAA;AAAA;EAoBI,8BAAYC,UAAZ,EAAoCC,kBAApC,EAAsGC,MAAtG,EAAuHC,iBAAvH,EAAiJ;IAC7I,KAAKH,UAAL,GAAkBA,UAAlB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKE,SAAL,GAAiB,IAAIZ,eAAJ,EAAjB;IACA,KAAKW,iBAAL,GAAyBA,iBAAzB;IAEA,KAAKE,OAAL,GAAe,KAAf;IAEA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,OAAL,GAAe,IAAf;EACH;;EAfDC,sBAAWC,8BAAX,EAAW,aAAX,EAAsB;IADtB;SACA;MACI,OAAO,KAAKL,SAAL,CAAeM,OAAtB;IACH,CAFqB;oBAAA;;EAAA,CAAtB;;EAiBaD,yCAAb,UAAqBE,GAArB,EAAkCC,cAAlC,EAAgE;;;;;;YAC5Df,GAAG,CAACgB,UAAJ,CAAeF,GAAf,EAAoB,KAApB;YACAd,GAAG,CAACgB,UAAJ,CAAeD,cAAf,EAA+B,gBAA/B;YACAf,GAAG,CAACiB,IAAJ,CAASF,cAAT,EAAyBhB,cAAzB,EAAyC,gBAAzC;YAEA,KAAKe,GAAL,GAAWA,GAAX;YAEA,KAAKT,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,qCAAhC,GAEA;;YACA,IAAIJ,cAAc,KAAKhB,cAAc,CAACqB,MAAlC,IACC,OAAOC,cAAP,KAA0B,WAA1B,IAAyC,OAAO,IAAIA,cAAJ,GAAqBC,YAA5B,KAA6C,QAD3F,EACsG;cAClG,MAAM,IAAIC,KAAJ,CAAU,4FAAV,CAAN;YACH;;YAEKC,WAAW,GAAgB;cAC7BC,WAAW,EAAE,KAAKlB,SAAL,CAAemB,MADC;cAE7BC,OAAO,EAAE,EAFoB;cAG7BC,OAAO,EAAE;YAHoB,CAA3B;;YAMN,IAAIb,cAAc,KAAKhB,cAAc,CAACqB,MAAtC,EAA8C;cAC1CI,WAAW,CAACF,YAAZ,GAA2B,aAA3B;YACH;;YAEa;YAAA;YAAA,EAAM,KAAKO,cAAL,EAAN;;;YAARC,KAAK,GAAGC,SAAR;YACN,KAAKC,iBAAL,CAAuBR,WAAvB,EAAoCM,KAApC;YAIMG,OAAO,GAAMnB,GAAG,QAAH,GAASoB,IAAI,CAACC,GAAL,EAAtB;YACN,KAAK9B,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,sCAAoCc,OAApC,GAA2C,GAA3E;YACiB;YAAA;YAAA,EAAM,KAAK9B,UAAL,CAAgBiC,GAAhB,CAAoBH,OAApB,EAA6BT,WAA7B,CAAN;;;YAAXa,QAAQ,GAAGN,SAAX;;YACN,IAAIM,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;cAC7B,KAAKjC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACyB,KAAzB,EAAgC,uDAAqDc,QAAQ,CAACC,UAA9D,GAAwE,GAAxG,EAD6B,CAG7B;;cACA,KAAKC,UAAL,GAAkB,IAAI3C,SAAJ,CAAcyC,QAAQ,CAACG,UAAT,IAAuB,EAArC,EAAyCH,QAAQ,CAACC,UAAlD,CAAlB;cACA,KAAK9B,OAAL,GAAe,KAAf;YACH,CAND,MAMO;cACH,KAAKA,OAAL,GAAe,IAAf;YACH;;YAED,KAAKiC,SAAL,GAAiB,KAAKC,IAAL,CAAU,KAAK5B,GAAf,EAAoBU,WAApB,CAAjB;;;;;;;EACH,CA5CY;;EA8CCZ,gDAAd;;;;;iBACQ,KAAKR,oBAAL;YAAA;YAAA;YACO;YAAA;YAAA,EAAM,KAAKA,kBAAL,EAAN;;;YAAP;YAAA;YAAA,EAAO2B,SAAP;;;YAGJ;YAAA;YAAA,EAAO,IAAP;;;;EACH,CANa;;EAQNnB,mDAAR,UAA0B+B,OAA1B,EAAgDb,KAAhD,EAAoE;IAChE,IAAI,CAACa,OAAO,CAAChB,OAAb,EAAsB;MAClBgB,OAAO,CAAChB,OAAR,GAAkB,EAAlB;IACH;;IACD,IAAIG,KAAJ,EAAW;MACP;MACAa,OAAO,CAAChB,OAAR,CAAgB,eAAhB,IAAmC,YAAUG,KAA7C;MACA;IACH,CAR+D,CAShE;;;IACA,IAAIa,OAAO,CAAChB,OAAR,CAAgB,eAAhB,CAAJ,EAAsC;MAClC;MACA,OAAOgB,OAAO,CAAChB,OAAR,CAAgB,eAAhB,CAAP;IACH;EACJ,CAdO;;EAgBMf,sCAAd,UAAmBE,GAAnB,EAAgCU,WAAhC,EAAwD;;;;;;;;;;;iBAEzC,KAAKhB,SAAO;YAAA;YAAA;YAED;YAAA;YAAA,EAAM,KAAKqB,cAAL,EAAN;;;YAARC,KAAK,GAAGC,SAAR;YACN,KAAKC,iBAAL,CAAuBR,WAAvB,EAAoCM,KAApC;;;;;;YAGUG,OAAO,GAAMnB,GAAG,QAAH,GAASoB,IAAI,CAACC,GAAL,EAAtB;YACN,KAAK9B,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,sCAAoCc,OAApC,GAA2C,GAA3E;YACiB;YAAA;YAAA,EAAM,KAAK9B,UAAL,CAAgBiC,GAAhB,CAAoBH,OAApB,EAA6BT,WAA7B,CAAN;;;YAAXa,QAAQ,GAAGN,SAAX;;YAEN,IAAIM,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;cAC7B,KAAKjC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAAC8C,WAAzB,EAAsC,oDAAtC;cAEA,KAAKpC,OAAL,GAAe,KAAf;YACH,CAJD,MAIO,IAAI6B,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;cACpC,KAAKjC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACyB,KAAzB,EAAgC,uDAAqDc,QAAQ,CAACC,UAA9D,GAAwE,GAAxG,EADoC,CAGpC;;cACA,KAAKC,UAAL,GAAkB,IAAI3C,SAAJ,CAAcyC,QAAQ,CAACG,UAAT,IAAuB,EAArC,EAAyCH,QAAQ,CAACC,UAAlD,CAAlB;cACA,KAAK9B,OAAL,GAAe,KAAf;YACH,CANM,MAMA;cACH;cACA,IAAI6B,QAAQ,CAACQ,OAAb,EAAsB;gBAClB,KAAKxC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,4CAA0ClB,aAAa,CAACoC,QAAQ,CAACQ,OAAV,EAAmB,KAAKvC,iBAAxB,CAAvD,GAAiG,GAAjI;;gBACA,IAAI,KAAKG,SAAT,EAAoB;kBAChB,KAAKA,SAAL,CAAe4B,QAAQ,CAACQ,OAAxB;gBACH;cACJ,CALD,MAKO;gBACH;gBACA,KAAKxC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,oDAAhC;cACH;YACJ;;;;;;;;;YAED,IAAI,CAAC,KAAKX,OAAV,EAAmB;cACf;cACA,KAAKH,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,0DAAwD2B,GAAC,CAACC,OAA1F;YACH,CAHD,MAGO;cACH,IAAID,GAAC,YAAYjD,YAAjB,EAA+B;gBAC3B;gBACA,KAAKQ,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,oDAAhC;cACH,CAHD,MAGO;gBACH;gBACA,KAAKoB,UAAL,GAAkBO,GAAlB;gBACA,KAAKtC,OAAL,GAAe,KAAf;cACH;YACJ;;;;;;;;;;;;;;;;;YAIT,KAAKH,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,2CAAhC,GAEA;YACA;;YACA,IAAI,CAAC,KAAK6B,WAAV,EAAuB;cACnB,KAAKC,YAAL;YACH;;;;;;;;;;;;;EAER,CA3Da;;EA6DDrC,sCAAb,UAAkBsC,IAAlB,EAA2B;;;QACvB,IAAI,CAAC,KAAK1C,OAAV,EAAmB;UACf;UAAA;UAAA,EAAO2C,OAAO,CAACC,MAAR,CAAe,IAAI7B,KAAJ,CAAU,8CAAV,CAAf,CAAP;QACH;;QACD;QAAA;QAAA,EAAOrB,WAAW,CAAC,KAAKG,MAAN,EAAc,aAAd,EAA6B,KAAKF,UAAlC,EAA8C,KAAKW,GAAnD,EAAyD,KAAKV,kBAA9D,EAAkF8C,IAAlF,EAAwF,KAAK5C,iBAA7F,CAAlB;;;EACH,CALY;;EAOAM,sCAAb;;;;;;YACI,KAAKP,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,2CAAhC,GAEA;;YACA,KAAKX,OAAL,GAAe,KAAf;YACA,KAAKD,SAAL,CAAe8C,KAAf;;;;;;YAGI;YAAA;YAAA,EAAM,KAAKZ,SAAX;;;YAAAV,WAEA;;;YACA,KAAK1B,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,uDAAqD,KAAKL,GAA1D,GAA6D,GAA7F;YAEMwC,aAAa,GAAgB;cAC/B3B,OAAO,EAAE;YADsB,CAA7B;YAGQ;YAAA;YAAA,EAAM,KAAKE,cAAL,EAAN;;;YAARC,KAAK,GAAGC,SAAR;YACN,KAAKC,iBAAL,CAAuBsB,aAAvB,EAAsCxB,KAAtC;YACA;YAAA;YAAA,EAAM,KAAK3B,UAAL,CAAgBoD,MAAhB,CAAuB,KAAKzC,GAA5B,EAAkCwC,aAAlC,CAAN;;;YAAAvB;;YAEA,KAAK1B,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,8CAAhC;;;;;;YAEA,KAAKd,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgC,wCAAhC,GAEA;YACA;;YACA,KAAK8B,YAAL;;;;;;;;;;;;EAEP,CA5BY;;EA8BLrC,8CAAR;IACI,IAAI,KAAKF,OAAT,EAAkB;MACd,IAAI8C,UAAU,GAAG,+CAAjB;;MACA,IAAI,KAAKjB,UAAT,EAAqB;QACjBiB,UAAU,IAAI,aAAa,KAAKjB,UAAhC;MACH;;MACD,KAAKlC,MAAL,CAAYa,GAAZ,CAAgBpB,QAAQ,CAACqB,KAAzB,EAAgCqC,UAAhC;MACA,KAAK9C,OAAL,CAAa,KAAK6B,UAAlB;IACH;EACJ,CATO;;EAUZ;AAAC,CAnND","names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","sendMessage","httpClient","accessTokenFactory","logger","logMessageContent","pollAbort","running","onreceive","onclose","Object","LongPollingTransport","aborted","url","transferFormat","isRequired","isIn","log","Trace","Binary","XMLHttpRequest","responseType","Error","pollOptions","abortSignal","signal","headers","timeout","getAccessToken","token","_a","updateHeaderToken","pollUrl","Date","now","get","response","statusCode","closeError","statusText","receiving","poll","request","Information","content","e_1","message","pollAborted","raiseOnClose","data","Promise","reject","abort","deleteOptions","delete","logMessage"],"sourceRoot":"","sources":["../../src/LongPollingTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly pollAbort: AbortController;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 100000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}