{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { NullLogger } from \"./Loggers\";\n/** @private */\n\nvar Arg =\n/** @class */\nfunction () {\n  function Arg() {}\n\n  Arg.isRequired = function (val, name) {\n    if (val === null || val === undefined) {\n      throw new Error(\"The '\" + name + \"' argument is required.\");\n    }\n  };\n\n  Arg.isIn = function (val, values, name) {\n    // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\n    if (!(val in values)) {\n      throw new Error(\"Unknown \" + name + \" value: \" + val + \".\");\n    }\n  };\n\n  return Arg;\n}();\n\nexport { Arg };\n/** @private */\n\nvar Platform =\n/** @class */\nfunction () {\n  function Platform() {}\n\n  Object.defineProperty(Platform, \"isBrowser\", {\n    get: function () {\n      return typeof window === \"object\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Platform, \"isWebWorker\", {\n    get: function () {\n      return typeof self === \"object\" && \"importScripts\" in self;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Platform, \"isNode\", {\n    get: function () {\n      return !this.isBrowser && !this.isWebWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Platform;\n}();\n\nexport { Platform };\n/** @private */\n\nexport function getDataDetail(data, includeContent) {\n  var detail = \"\";\n\n  if (isArrayBuffer(data)) {\n    detail = \"Binary data of length \" + data.byteLength;\n\n    if (includeContent) {\n      detail += \". Content: '\" + formatArrayBuffer(data) + \"'\";\n    }\n  } else if (typeof data === \"string\") {\n    detail = \"String data of length \" + data.length;\n\n    if (includeContent) {\n      detail += \". Content: '\" + data + \"'\";\n    }\n  }\n\n  return detail;\n}\n/** @private */\n\nexport function formatArrayBuffer(data) {\n  var view = new Uint8Array(data); // Uint8Array.map only supports returning another Uint8Array?\n\n  var str = \"\";\n  view.forEach(function (num) {\n    var pad = num < 16 ? \"0\" : \"\";\n    str += \"0x\" + pad + num.toString(16) + \" \";\n  }); // Trim of trailing space.\n\n  return str.substr(0, str.length - 1);\n} // Also in signalr-protocol-msgpack/Utils.ts\n\n/** @private */\n\nexport function isArrayBuffer(val) {\n  return val && typeof ArrayBuffer !== \"undefined\" && (val instanceof ArrayBuffer || // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\n  val.constructor && val.constructor.name === \"ArrayBuffer\");\n}\n/** @private */\n\nexport function sendMessage(logger, transportName, httpClient, url, accessTokenFactory, content, logMessageContent) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, headers, token, responseType, response;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!accessTokenFactory) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , accessTokenFactory()];\n\n        case 1:\n          token = _b.sent();\n\n          if (token) {\n            headers = (_a = {}, _a[\"Authorization\"] = \"Bearer \" + token, _a);\n          }\n\n          _b.label = 2;\n\n        case 2:\n          logger.log(LogLevel.Trace, \"(\" + transportName + \" transport) sending data. \" + getDataDetail(content, logMessageContent) + \".\");\n          responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\n          return [4\n          /*yield*/\n          , httpClient.post(url, {\n            content: content,\n            headers: headers,\n            responseType: responseType\n          })];\n\n        case 3:\n          response = _b.sent();\n          logger.log(LogLevel.Trace, \"(\" + transportName + \" transport) request complete. Response status: \" + response.statusCode + \".\");\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** @private */\n\nexport function createLogger(logger) {\n  if (logger === undefined) {\n    return new ConsoleLogger(LogLevel.Information);\n  }\n\n  if (logger === null) {\n    return NullLogger.instance;\n  }\n\n  if (logger.log) {\n    return logger;\n  }\n\n  return new ConsoleLogger(logger);\n}\n/** @private */\n\nvar SubjectSubscription =\n/** @class */\nfunction () {\n  function SubjectSubscription(subject, observer) {\n    this.subject = subject;\n    this.observer = observer;\n  }\n\n  SubjectSubscription.prototype.dispose = function () {\n    var index = this.subject.observers.indexOf(this.observer);\n\n    if (index > -1) {\n      this.subject.observers.splice(index, 1);\n    }\n\n    if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\n      this.subject.cancelCallback().catch(function (_) {});\n    }\n  };\n\n  return SubjectSubscription;\n}();\n\nexport { SubjectSubscription };\n/** @private */\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  function ConsoleLogger(minimumLogLevel) {\n    this.minimumLogLevel = minimumLogLevel;\n    this.outputConsole = console;\n  }\n\n  ConsoleLogger.prototype.log = function (logLevel, message) {\n    if (logLevel >= this.minimumLogLevel) {\n      switch (logLevel) {\n        case LogLevel.Critical:\n        case LogLevel.Error:\n          this.outputConsole.error(\"[\" + new Date().toISOString() + \"] \" + LogLevel[logLevel] + \": \" + message);\n          break;\n\n        case LogLevel.Warning:\n          this.outputConsole.warn(\"[\" + new Date().toISOString() + \"] \" + LogLevel[logLevel] + \": \" + message);\n          break;\n\n        case LogLevel.Information:\n          this.outputConsole.info(\"[\" + new Date().toISOString() + \"] \" + LogLevel[logLevel] + \": \" + message);\n          break;\n\n        default:\n          // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\n          this.outputConsole.log(\"[\" + new Date().toISOString() + \"] \" + LogLevel[logLevel] + \": \" + message);\n          break;\n      }\n    }\n  };\n\n  return ConsoleLogger;\n}();\n\nexport { ConsoleLogger };","map":{"version":3,"mappings":"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","names":["LogLevel","NullLogger","Arg","val","name","undefined","Error","values","Object","Platform","window","self","isBrowser","isWebWorker","data","includeContent","detail","isArrayBuffer","byteLength","formatArrayBuffer","length","view","Uint8Array","str","forEach","num","pad","toString","substr","ArrayBuffer","constructor","logger","transportName","httpClient","url","accessTokenFactory","content","logMessageContent","token","_b","headers","_a","log","Trace","getDataDetail","responseType","post","response","statusCode","ConsoleLogger","Information","instance","subject","observer","SubjectSubscription","index","observers","indexOf","splice","cancelCallback","catch","_","minimumLogLevel","outputConsole","console","logLevel","message","Critical","error","Date","toISOString","Warning","warn","info"],"sourceRoot":"","sources":["../../src/Utils.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n        responseType,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public outputConsole: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n        this.outputConsole = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.outputConsole.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.outputConsole.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.outputConsole.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.outputConsole.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}