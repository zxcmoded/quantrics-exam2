{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { SubjectSubscription } from \"./Utils\";\n/** Stream implementation to stream items to the server. */\n\nvar Subject =\n/** @class */\nfunction () {\n  function Subject() {\n    this.observers = [];\n  }\n\n  Subject.prototype.next = function (item) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n      observer.next(item);\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n\n      if (observer.error) {\n        observer.error(err);\n      }\n    }\n  };\n\n  Subject.prototype.complete = function () {\n    for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {\n      var observer = _a[_i];\n\n      if (observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Subject.prototype.subscribe = function (observer) {\n    this.observers.push(observer);\n    return new SubjectSubscription(this, observer);\n  };\n\n  return Subject;\n}();\n\nexport { Subject };","map":{"version":3,"mappings":"AAAA;AACA;AAGA,SAASA,mBAAT,QAAoC,SAApC;AAEA;;AACA;AAAA;AAAA;EAOI;IACI,KAAKC,SAAL,GAAiB,EAAjB;EACH;;EAEMC,yBAAP,UAAYC,IAAZ,EAAmB;IACf,KAAuB,sBAAKF,SAA5B,EAAuBG,cAAvB,EAAuBA,IAAvB,EAAuC;MAAlC,IAAMC,QAAQ,SAAd;MACDA,QAAQ,CAACC,IAAT,CAAcH,IAAd;IACH;EACJ,CAJM;;EAMAD,0BAAP,UAAaK,GAAb,EAAqB;IACjB,KAAuB,sBAAKN,SAA5B,EAAuBG,cAAvB,EAAuBA,IAAvB,EAAuC;MAAlC,IAAMC,QAAQ,SAAd;;MACD,IAAIA,QAAQ,CAACG,KAAb,EAAoB;QAChBH,QAAQ,CAACG,KAAT,CAAeD,GAAf;MACH;IACJ;EACJ,CANM;;EAQAL,6BAAP;IACI,KAAuB,sBAAKD,SAA5B,EAAuBG,cAAvB,EAAuBA,IAAvB,EAAuC;MAAlC,IAAMC,QAAQ,SAAd;;MACD,IAAIA,QAAQ,CAACI,QAAb,EAAuB;QACnBJ,QAAQ,CAACI,QAAT;MACH;IACJ;EACJ,CANM;;EAQAP,8BAAP,UAAiBG,QAAjB,EAA+C;IAC3C,KAAKJ,SAAL,CAAeS,IAAf,CAAoBL,QAApB;IACA,OAAO,IAAIL,mBAAJ,CAAwB,IAAxB,EAA8BK,QAA9B,CAAP;EACH,CAHM;;EAIX;AAAC,CArCD","names":["SubjectSubscription","observers","Subject","item","_i","observer","next","err","error","complete","push"],"sourceRoot":"","sources":["../../src/Subject.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}