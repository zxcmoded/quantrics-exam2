{"ast":null,"code":"import assetApi from '../../api/assetApi';\nimport addAssetDialog from './AddAssetDialog.vue';\nimport editAssetDialog from './EditAssetDialog.vue';\nimport confirmationDialog from '@/common/ConfirmationDialog.vue';\nimport loading from 'vue-loading-overlay';\nexport default {\n  components: {\n    addAssetDialog,\n    editAssetDialog,\n    confirmationDialog,\n    loading\n  },\n  watch: {\n    'filterForm.Price'(value) {\n      this.filterForm.Price = value ? value : null;\n    },\n\n    'filterForm.ValidFrom'(value) {\n      this.filterForm.ValidFrom = value ? value : null;\n    },\n\n    'filterForm.ValidTo'(value) {\n      this.filterForm.ValidTo = value ? value : null;\n    }\n\n  },\n  data: function () {\n    return {\n      // Note 'isActive' is left out and will not appear in the rendered table\n      fields: [{\n        key: 'id',\n        label: 'Id',\n        sortable: true\n      }, {\n        key: 'name',\n        label: 'Name',\n        sortable: true\n      }, {\n        key: 'validFrom',\n        label: 'Valid From',\n        sortable: true\n      }, {\n        key: 'validTo',\n        label: 'Valid To',\n        sortable: true\n      }, {\n        key: 'price',\n        label: 'price',\n        sortable: true\n      }, {\n        key: 'actions',\n        label: 'Actions'\n      }],\n      assets: [],\n      selItem: {},\n      filterForm: {\n        Name: '',\n        Price: null,\n        ValidFrom: null,\n        ValidTo: null\n      },\n      isLoading: false\n    };\n  },\n  name: 'asset-list',\n  methods: {\n    async loadAssets() {\n      let vm = this;\n      vm.isLoading = true;\n      const {\n        data\n      } = await assetApi.fetchAssets(this.filterForm);\n      vm.assets = data;\n      vm.isLoading = false;\n    },\n\n    clearFilters() {\n      this.filterForm = {\n        Name: '',\n        Price: null,\n        ValidFrom: null,\n        ValidTo: null\n      };\n      this.loadAssets();\n    },\n\n    async deleteAsset() {\n      this.isLoading = true;\n\n      try {\n        const {\n          data\n        } = await assetApi.deleteAsset(this.selItem.id);\n\n        if (data) {\n          this.$toastr.success('Deleted successfully', 'Information');\n          this.selItem = {};\n          this.loadAssets();\n        } else {\n          this.$toastr.warning('Unable to delete asset', 'Warning');\n        }\n      } catch (error) {\n        this.$toastr.error(error.error.text, 'Error');\n      }\n\n      this.isLoading = false;\n    }\n\n  },\n\n  async mounted() {\n    let vm = this;\n    await vm.loadAssets();\n  }\n\n};","map":{"version":3,"mappings":"AAoFA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,cADA;IAEAC,eAFA;IAGAC,kBAHA;IAIAC;EAJA,CADA;EAOAC;IACA;MACA;IACA,CAHA;;IAIA;MACA;IACA,CANA;;IAOA;MACA;IACA;;EATA,CAPA;EAkBAC;IACA;MACA;MACAC,SACA;QACAC,SADA;QAEAC,WAFA;QAGAC;MAHA,CADA,EAMA;QACAF,WADA;QAEAC,aAFA;QAGAC;MAHA,CANA,EAWA;QACAF,gBADA;QAEAC,mBAFA;QAGAC;MAHA,CAXA,EAgBA;QACAF,cADA;QAEAC,iBAFA;QAGAC;MAHA,CAhBA,EAqBA;QACAF,YADA;QAEAC,cAFA;QAGAC;MAHA,CArBA,EA0BA;QAAAF;QAAAC;MAAA,CA1BA,CAFA;MA8BAE,UA9BA;MA+BAC,WA/BA;MAiCAC;QACAC,QADA;QAEAC,WAFA;QAGAC,eAHA;QAIAC;MAJA,CAjCA;MAwCAC;IAxCA;EA0CA,CA7DA;EA8DAC,kBA9DA;EA+DAC;IACA;MACA;MACAC;MACA;QAAAf;MAAA;MACAe;MACAA;IACA,CAPA;;IASAC;MACA;QACAR,QADA;QAEAC,WAFA;QAGAC,eAHA;QAIAC;MAJA;MAOA;IACA,CAlBA;;IAoBA;MACA;;MACA;QACA;UAAAX;QAAA;;QACA;UACA;UACA;UACA;QACA,CAJA,MAIA;UACA;QACA;MACA,CATA,CASA;QACA;MACA;;MACA;IACA;;EAnCA,CA/DA;;EAoGA;IACA;IACA;EACA;;AAvGA","names":["components","addAssetDialog","editAssetDialog","confirmationDialog","loading","watch","data","fields","key","label","sortable","assets","selItem","filterForm","Name","Price","ValidFrom","ValidTo","isLoading","name","methods","vm","clearFilters"],"sourceRoot":"src/views/asset","sources":["Asset.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <loading :active.sync=\"isLoading\" :can-cancel=\"true\" :is-full-page=\"true\"></loading>Â´\n\n    <b-card class=\"card\">\n      <b-row>\n        <b-col>\n          <h1>Asset Management</h1>\n          <hr />\n          <form>\n            <b-row>\n              <b-col md=\"2\" class=\"my-auto\">\n                <label>Name</label>\n              </b-col>\n              <b-col md=\"2\">\n                <input type=\"text\" v-model=\"filterForm.Name\" class=\"form-control\" />\n              </b-col>\n              <b-col md=\"2\" class=\"my-auto\">\n                <label>Price</label>\n              </b-col>\n              <b-col md=\"2\">\n                <input type=\"number\" v-model=\"filterForm.Price\" class=\"form-control\" />\n              </b-col>\n            </b-row>\n            <b-row class=\"mt-2\">\n              <b-col md=\"2\" class=\"my-auto\">\n                <label>Valid From</label>\n              </b-col>\n              <b-col md=\"2\">\n                <input type=\"date\" v-model=\"filterForm.ValidFrom\" class=\"form-control\" />\n              </b-col>\n              <b-col md=\"2\" class=\"my-auto\">\n                <label>Valid To</label>\n              </b-col>\n              <b-col md=\"2\">\n                <input type=\"date\" v-model=\"filterForm.ValidTo\" class=\"form-control\" />\n              </b-col>\n              <b-col md=\"4\">\n                <b-button variant=\"primary\" @click.self=\"loadAssets()\">Search</b-button>&nbsp;\n                <b-button variant=\"danger\" @click.self=\"clearFilters()\">Clear</b-button>\n              </b-col>\n            </b-row>\n          </form>\n          <hr />\n          <b-button v-b-modal.modal-add-asset variant=\"warning\">Add Asset</b-button>\n          <hr />\n          <b-table :bordered=\"true\" striped hover :items=\"assets\" :fields=\"fields\" label-sort-asc=\"\" label-sort-desc=\"\"\n            label-sort-clear=\"\">\n\n            <template #cell(validFrom)=\"row\">\n              {{ row.item.validFrom | dateFormat }}\n            </template>\n\n            <template #cell(validTo)=\"row\">\n              {{ row.item.validTo | dateFormat }}\n            </template>\n\n            <template #cell(price)=\"row\">\n              ${{ row.item.price | decimalFormat }}\n            </template>\n\n            <template #cell(actions)=\"row\">\n              <b-button size=\"sm\" class=\"mr-1\" v-b-modal.modal-edit-asset @click=\"selItem = row.item\" variant=\"success\">\n                Edit\n              </b-button>&nbsp;\n              <b-button size=\"sm\" variant=\"danger\" v-b-modal.modal-confirmation @click=\"selItem = row.item\">\n                Delete\n              </b-button>\n            </template>\n          </b-table>\n        </b-col>\n      </b-row>\n    </b-card>\n\n    <add-asset-dialog @loadList=\"loadAssets()\"></add-asset-dialog>\n    <edit-asset-dialog :asset=\"selItem\" @loadList=\"loadAssets()\"></edit-asset-dialog>\n\n    <confirmation-dialog @confirm=\"deleteAsset()\" :title=\"'Confirmation'\"\n      :content=\"'Do you want to delete this asset?'\">\n    </confirmation-dialog>\n  </div>\n</template>\n<script>\n\nimport assetApi from '../../api/assetApi';\nimport addAssetDialog from './AddAssetDialog.vue';\nimport editAssetDialog from './EditAssetDialog.vue';\nimport confirmationDialog from '@/common/ConfirmationDialog.vue';\nimport loading from 'vue-loading-overlay';\n\nexport default {\n  components: {\n    addAssetDialog,\n    editAssetDialog,\n    confirmationDialog,\n    loading\n  },\n  watch: {\n    'filterForm.Price'(value) {\n      this.filterForm.Price = value ? value : null;\n    },\n    'filterForm.ValidFrom'(value) {\n      this.filterForm.ValidFrom = value ? value : null;\n    },\n    'filterForm.ValidTo'(value) {\n      this.filterForm.ValidTo = value ? value : null;\n    }\n  },\n  data: function () {\n    return {\n      // Note 'isActive' is left out and will not appear in the rendered table\n      fields: [\n        {\n          key: 'id',\n          label: 'Id',\n          sortable: true\n        },\n        {\n          key: 'name',\n          label: 'Name',\n          sortable: true\n        },\n        {\n          key: 'validFrom',\n          label: 'Valid From',\n          sortable: true,\n        },\n        {\n          key: 'validTo',\n          label: 'Valid To',\n          sortable: true,\n        },\n        {\n          key: 'price',\n          label: 'price',\n          sortable: true,\n        },\n        { key: 'actions', label: 'Actions' }\n      ],\n      assets: [],\n      selItem: {},\n\n      filterForm: {\n        Name: '',\n        Price: null,\n        ValidFrom: null,\n        ValidTo: null\n      },\n\n      isLoading: false\n    }\n  },\n  name: 'asset-list',\n  methods: {\n    async loadAssets() {\n      let vm = this;\n      vm.isLoading = true;\n      const { data } = await assetApi.fetchAssets(this.filterForm);\n      vm.assets = data;\n      vm.isLoading = false;\n    },\n\n    clearFilters() {\n      this.filterForm = {\n        Name: '',\n        Price: null,\n        ValidFrom: null,\n        ValidTo: null\n      };\n\n      this.loadAssets();\n    },\n\n    async deleteAsset() {\n      this.isLoading = true;\n      try {\n        const { data } = await assetApi.deleteAsset(this.selItem.id);\n        if (data) {\n          this.$toastr.success('Deleted successfully', 'Information');\n          this.selItem = {};\n          this.loadAssets();\n        } else {\n          this.$toastr.warning('Unable to delete asset', 'Warning');\n        }\n      } catch (error) {\n        this.$toastr.error(error.error.text, 'Error');\n      }\n      this.isLoading = false;\n    }\n  },\n  async mounted() {\n    let vm = this;\n    await vm.loadAssets()\n  }\n}\n\n</script>\n<style>\n.card {\n  padding: 15px\n}\n</style>"]},"metadata":{},"sourceType":"module"}