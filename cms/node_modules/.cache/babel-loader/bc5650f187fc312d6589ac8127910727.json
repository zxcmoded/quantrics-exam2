{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nvar JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nvar JsonHubProtocol =\n/** @class */\nfunction () {\n  function JsonHubProtocol() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 1;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  JsonHubProtocol.prototype.parseMessages = function (input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n\n    if (!input) {\n      return [];\n    }\n\n    if (logger === null) {\n      logger = NullLogger.instance;\n    } // Parse the messages\n\n\n    var messages = TextMessageFormat.parse(input);\n    var hubMessages = [];\n\n    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n      var message = messages_1[_i];\n      var parsedMessage = JSON.parse(message);\n\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this.isInvocationMessage(parsedMessage);\n          break;\n\n        case MessageType.StreamItem:\n          this.isStreamItemMessage(parsedMessage);\n          break;\n\n        case MessageType.Completion:\n          this.isCompletionMessage(parsedMessage);\n          break;\n\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n\n      hubMessages.push(parsedMessage);\n    }\n\n    return hubMessages;\n  };\n  /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n\n\n  JsonHubProtocol.prototype.writeMessage = function (message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  };\n\n  JsonHubProtocol.prototype.isInvocationMessage = function (message) {\n    this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n    if (message.invocationId !== undefined) {\n      this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  };\n\n  JsonHubProtocol.prototype.isStreamItemMessage = function (message) {\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  };\n\n  JsonHubProtocol.prototype.isCompletionMessage = function (message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n\n    if (!message.result && message.error) {\n      this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  };\n\n  JsonHubProtocol.prototype.assertNotEmptyString = function (value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  };\n\n  return JsonHubProtocol;\n}();\n\nexport { JsonHubProtocol };","map":{"version":3,"mappings":"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","names":["MessageType","LogLevel","TransferFormat","NullLogger","TextMessageFormat","JSON_HUB_PROTOCOL_NAME","Text","JsonHubProtocol","input","logger","Error","instance","messages","parse","hubMessages","_i","message","parsedMessage","JSON","type","Invocation","isInvocationMessage","StreamItem","isStreamItemMessage","Completion","isCompletionMessage","Ping","Close","log","Information","push","write","stringify","assertNotEmptyString","target","invocationId","undefined","item","result","error","value","errorMessage"],"sourceRoot":"","sources":["../../src/JsonHubProtocol.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}