{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Arg, Subject } from \"./Utils\";\nvar DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\n/** Represents a connection to a SignalR Hub. */\n\nvar HubConnection =\n/** @class */\nfunction () {\n  function HubConnection(connection, logger, protocol) {\n    var _this = this;\n\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.logger = logger;\n    this.protocol = protocol;\n    this.connection = connection;\n    this.handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = function (data) {\n      return _this.processIncomingData(data);\n    };\n\n    this.connection.onclose = function (error) {\n      return _this.connectionClosed(error);\n    };\n\n    this.callbacks = {};\n    this.methods = {};\n    this.closedCallbacks = [];\n    this.id = 0;\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  HubConnection.create = function (connection, logger, protocol) {\n    return new HubConnection(connection, logger, protocol);\n  };\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.start = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var handshakeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            handshakeRequest = {\n              protocol: this.protocol.name,\n              version: this.protocol.version\n            };\n            this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n            this.receivedHandshakeResponse = false;\n            return [4\n            /*yield*/\n            , this.connection.start(this.protocol.transferFormat)];\n\n          case 1:\n            _a.sent();\n\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\n            return [4\n            /*yield*/\n            , this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];\n\n          case 2:\n            _a.sent();\n\n            this.logger.log(LogLevel.Information, \"Using HubProtocol '\" + this.protocol.name + \"'.\"); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n            this.cleanupTimeout();\n            this.configureTimeout();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.stop = function () {\n    this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n    this.cleanupTimeout();\n    return this.connection.stop();\n  };\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  HubConnection.prototype.stream = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createStreamInvocation(methodName, args);\n    var subject = new Subject(function () {\n      var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);\n\n      var cancelMessage = _this.protocol.writeMessage(cancelInvocation);\n\n      delete _this.callbacks[invocationDescriptor.invocationId];\n      return _this.connection.send(cancelMessage);\n    });\n\n    this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n      if (error) {\n        subject.error(error);\n        return;\n      }\n\n      if (invocationEvent.type === MessageType.Completion) {\n        if (invocationEvent.error) {\n          subject.error(new Error(invocationEvent.error));\n        } else {\n          subject.complete();\n        }\n      } else {\n        subject.next(invocationEvent.item);\n      }\n    };\n\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    this.connection.send(message).catch(function (e) {\n      subject.error(e);\n      delete _this.callbacks[invocationDescriptor.invocationId];\n    });\n    return subject;\n  };\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.send = function (methodName) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createInvocation(methodName, args, true);\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    return this.connection.send(message);\n  };\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  HubConnection.prototype.invoke = function (methodName) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var invocationDescriptor = this.createInvocation(methodName, args, false);\n    var p = new Promise(function (resolve, reject) {\n      _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (invocationEvent.type === MessageType.Completion) {\n          var completionMessage = invocationEvent;\n\n          if (completionMessage.error) {\n            reject(new Error(completionMessage.error));\n          } else {\n            resolve(completionMessage.result);\n          }\n        } else {\n          reject(new Error(\"Unexpected message type: \" + invocationEvent.type));\n        }\n      };\n\n      var message = _this.protocol.writeMessage(invocationDescriptor);\n\n      _this.connection.send(message).catch(function (e) {\n        reject(e);\n        delete _this.callbacks[invocationDescriptor.invocationId];\n      });\n    });\n    return p;\n  };\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  HubConnection.prototype.on = function (methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this.methods[methodName]) {\n      this.methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this.methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this.methods[methodName].push(newMethod);\n  };\n\n  HubConnection.prototype.off = function (methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    var handlers = this.methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      var removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this.methods[methodName];\n        }\n      }\n    } else {\n      delete this.methods[methodName];\n    }\n  };\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  HubConnection.prototype.onclose = function (callback) {\n    if (callback) {\n      this.closedCallbacks.push(callback);\n    }\n  };\n\n  HubConnection.prototype.processIncomingData = function (data) {\n    this.cleanupTimeout();\n\n    if (!this.receivedHandshakeResponse) {\n      data = this.processHandshakeResponse(data);\n      this.receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      var messages = this.protocol.parseMessages(data, this.logger);\n\n      for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n        var message = messages_1[_i];\n\n        switch (message.type) {\n          case MessageType.Invocation:\n            this.invokeClientMethod(message);\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            var callback = this.callbacks[message.invocationId];\n\n            if (callback != null) {\n              if (message.type === MessageType.Completion) {\n                delete this.callbacks[message.invocationId];\n              }\n\n              callback(message);\n            }\n\n            break;\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            this.logger.log(LogLevel.Information, \"Close message received from server.\"); // We don't want to wait on the stop itself.\n            // tslint:disable-next-line:no-floating-promises\n\n            this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\n            break;\n\n          default:\n            this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\n            break;\n        }\n      }\n    }\n\n    this.configureTimeout();\n  };\n\n  HubConnection.prototype.processHandshakeResponse = function (data) {\n    var _a;\n\n    var responseMessage;\n    var remainingData;\n\n    try {\n      _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];\n    } catch (e) {\n      var message = \"Error parsing handshake response: \" + e;\n      this.logger.log(LogLevel.Error, message);\n      var error = new Error(message); // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n\n      this.connection.stop(error);\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      var message = \"Server returned handshake error: \" + responseMessage.error;\n      this.logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n\n      this.connection.stop(new Error(message));\n    } else {\n      this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    return remainingData;\n  };\n\n  HubConnection.prototype.configureTimeout = function () {\n    var _this = this;\n\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this.timeoutHandle = setTimeout(function () {\n        return _this.serverTimeout();\n      }, this.serverTimeoutInMilliseconds);\n    }\n  };\n\n  HubConnection.prototype.serverTimeout = function () {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise.\n    // tslint:disable-next-line:no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  };\n\n  HubConnection.prototype.invokeClientMethod = function (invocationMessage) {\n    var _this = this;\n\n    var methods = this.methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      methods.forEach(function (m) {\n        return m.apply(_this, invocationMessage.arguments);\n      });\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        var message = \"Server requested a response, which is not supported in this version of the client.\";\n        this.logger.log(LogLevel.Error, message); // We don't need to wait on this Promise.\n        // tslint:disable-next-line:no-floating-promises\n\n        this.connection.stop(new Error(message));\n      }\n    } else {\n      this.logger.log(LogLevel.Warning, \"No client method with the name '\" + invocationMessage.target + \"' found.\");\n    }\n  };\n\n  HubConnection.prototype.connectionClosed = function (error) {\n    var _this = this;\n\n    var callbacks = this.callbacks;\n    this.callbacks = {};\n    Object.keys(callbacks).forEach(function (key) {\n      var callback = callbacks[key];\n      callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\n    });\n    this.cleanupTimeout();\n    this.closedCallbacks.forEach(function (c) {\n      return c.apply(_this, [error]);\n    });\n  };\n\n  HubConnection.prototype.cleanupTimeout = function () {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  };\n\n  HubConnection.prototype.createInvocation = function (methodName, args, nonblocking) {\n    if (nonblocking) {\n      return {\n        arguments: args,\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    } else {\n      var id = this.id;\n      this.id++;\n      return {\n        arguments: args,\n        invocationId: id.toString(),\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    }\n  };\n\n  HubConnection.prototype.createStreamInvocation = function (methodName, args) {\n    var id = this.id;\n    this.id++;\n    return {\n      arguments: args,\n      invocationId: id.toString(),\n      target: methodName,\n      type: MessageType.StreamInvocation\n    };\n  };\n\n  HubConnection.prototype.createCancelInvocation = function (id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  };\n\n  return HubConnection;\n}();\n\nexport { HubConnection };","map":{"version":3,"mappings":"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","names":["HandshakeProtocol","MessageType","LogLevel","Arg","Subject","DEFAULT_TIMEOUT_IN_MS","connection","logger","protocol","isRequired","serverTimeoutInMilliseconds","handshakeProtocol","onreceive","data","processIncomingData","onclose","error","connectionClosed","callbacks","methods","closedCallbacks","id","HubConnection","handshakeRequest","name","version","log","Debug","receivedHandshakeResponse","start","transferFormat","_a","send","writeHandshakeRequest","Information","cleanupTimeout","configureTimeout","stop","methodName","args","invocationDescriptor","createStreamInvocation","subject","cancelInvocation","_this","createCancelInvocation","invocationId","cancelMessage","writeMessage","invocationEvent","type","Completion","Error","complete","next","item","message","catch","e","createInvocation","p","Promise","resolve","reject","completionMessage","result","newMethod","toLowerCase","indexOf","push","method","handlers","removeIdx","splice","length","callback","processHandshakeResponse","messages","parseMessages","_i","Invocation","invokeClientMethod","StreamItem","Ping","Close","Warning","responseMessage","remainingData","features","inherentKeepAlive","timeoutHandle","setTimeout","serverTimeout","invocationMessage","target","forEach","m","apply","arguments","Object","keys","key","undefined","c","clearTimeout","nonblocking","toString","StreamInvocation","CancelInvocation"],"sourceRoot":"","sources":["../../src/HubConnection.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private timeoutHandle?: any;\r\n    private receivedHandshakeResponse: boolean;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.configureTimeout();\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return this.connection.send(cancelMessage);\r\n        });\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                } else {\r\n                    subject.complete();\r\n                }\r\n            } else {\r\n                subject.next((invocationEvent.item) as T);\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    const completionMessage = invocationEvent as CompletionMessage;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    } else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                } else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    delete this.callbacks[invocationDescriptor.invocationId];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @aspnet/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @aspnet/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        // We don't want to wait on the stop itself.\r\n                        // tslint:disable-next-line:no-floating-promises\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(new Error(message));\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        return remainingData;\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't need to wait on this Promise.\r\n                // tslint:disable-next-line:no-floating-promises\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}