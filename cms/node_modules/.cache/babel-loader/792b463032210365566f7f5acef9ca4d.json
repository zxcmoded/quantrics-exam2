{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, Platform } from \"./Utils\";\n/** @private */\n\nvar WebSocketTransport =\n/** @class */\nfunction () {\n  function WebSocketTransport(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor) {\n    this.logger = logger;\n    this.accessTokenFactory = accessTokenFactory;\n    this.logMessageContent = logMessageContent;\n    this.webSocketConstructor = webSocketConstructor;\n    this.httpClient = httpClient;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  WebSocketTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\n            if (!this.accessTokenFactory) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n\n            if (token) {\n              url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (\"access_token=\" + encodeURIComponent(token));\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              url = url.replace(/^http/, \"ws\");\n              var webSocket;\n\n              var cookies = _this.httpClient.getCookieString(url);\n\n              var opened = false;\n\n              if (Platform.isNode && cookies) {\n                // Only pass cookies when in non-browser environments\n                webSocket = new _this.webSocketConstructor(url, undefined, {\n                  headers: {\n                    Cookie: \"\" + cookies\n                  }\n                });\n              }\n\n              if (!webSocket) {\n                // Chrome is not happy with passing 'undefined' as protocol\n                webSocket = new _this.webSocketConstructor(url);\n              }\n\n              if (transferFormat === TransferFormat.Binary) {\n                webSocket.binaryType = \"arraybuffer\";\n              } // tslint:disable-next-line:variable-name\n\n\n              webSocket.onopen = function (_event) {\n                _this.logger.log(LogLevel.Information, \"WebSocket connected to \" + url + \".\");\n\n                _this.webSocket = webSocket;\n                opened = true;\n                resolve();\n              };\n\n              webSocket.onerror = function (event) {\n                var error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                  error = event.error;\n                } else {\n                  error = new Error(\"There was an error with the transport.\");\n                }\n\n                reject(error);\n              };\n\n              webSocket.onmessage = function (message) {\n                _this.logger.log(LogLevel.Trace, \"(WebSockets transport) data received. \" + getDataDetail(message.data, _this.logMessageContent) + \".\");\n\n                if (_this.onreceive) {\n                  _this.onreceive(message.data);\n                }\n              };\n\n              webSocket.onclose = function (event) {\n                // Don't call close handler if connection was never established\n                // We'll reject the connect call instead\n                if (opened) {\n                  _this.close(event);\n                } else {\n                  var error = null; // ErrorEvent is a browser only type we need to check if the type exists before using it\n\n                  if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\n                    error = event.error;\n                  } else {\n                    error = new Error(\"There was an error with the transport.\");\n                  }\n\n                  reject(error);\n                }\n              };\n            })];\n        }\n      });\n    });\n  };\n\n  WebSocketTransport.prototype.send = function (data) {\n    if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\n      this.logger.log(LogLevel.Trace, \"(WebSockets transport) sending data. \" + getDataDetail(data, this.logMessageContent) + \".\");\n      this.webSocket.send(data);\n      return Promise.resolve();\n    }\n\n    return Promise.reject(\"WebSocket is not in the OPEN state\");\n  };\n\n  WebSocketTransport.prototype.stop = function () {\n    if (this.webSocket) {\n      // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n      // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n      this.close(undefined);\n    }\n\n    return Promise.resolve();\n  };\n\n  WebSocketTransport.prototype.close = function (event) {\n    // webSocket will be null if the transport did not start successfully\n    if (this.webSocket) {\n      // Clear websocket handlers because we are considering the socket closed now\n      this.webSocket.onclose = function () {};\n\n      this.webSocket.onmessage = function () {};\n\n      this.webSocket.onerror = function () {};\n\n      this.webSocket.close();\n      this.webSocket = undefined;\n    }\n\n    this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n\n    if (this.onclose) {\n      if (event && (event.wasClean === false || event.code !== 1000)) {\n        this.onclose(new Error(\"WebSocket closed with status code: \" + event.code + \" (\" + event.reason + \").\"));\n      } else {\n        this.onclose();\n      }\n    }\n  };\n\n  return WebSocketTransport;\n}();\n\nexport { WebSocketTransport };","map":{"version":3,"mappings":"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","names":["LogLevel","TransferFormat","Arg","getDataDetail","Platform","httpClient","accessTokenFactory","logger","logMessageContent","webSocketConstructor","onreceive","onclose","WebSocketTransport","url","transferFormat","isRequired","isIn","log","Trace","token","_a","indexOf","encodeURIComponent","Promise","resolve","reject","replace","webSocket","cookies","_this","getCookieString","opened","isNode","undefined","headers","Cookie","Binary","binaryType","onopen","_event","Information","onerror","event","error","ErrorEvent","Error","onmessage","message","data","close","readyState","OPEN","send","wasClean","code","reason"],"sourceRoot":"","sources":["../../src/WebSocketTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode && cookies) {\r\n                // Only pass cookies when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: {\r\n                        Cookie: `${cookies}`,\r\n                    },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (event && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}