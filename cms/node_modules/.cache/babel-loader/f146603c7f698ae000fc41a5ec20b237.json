{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\nvar SHUTDOWN_TIMEOUT = 5 * 1000; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nvar LongPollingTransport =\n/** @class */\nfunction () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent, shutdownTimeout) {\n    this.httpClient = httpClient;\n\n    this.accessTokenFactory = accessTokenFactory || function () {\n      return null;\n    };\n\n    this.logger = logger;\n    this.pollAbort = new AbortController();\n    this.logMessageContent = logMessageContent;\n    this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\n  }\n\n  Object.defineProperty(LongPollingTransport.prototype, \"pollAborted\", {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get: function () {\n      return this.pollAbort.aborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LongPollingTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pollOptions, token, closeError, pollUrl, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.url = url;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\n\n            if (transferFormat === TransferFormat.Binary && typeof new XMLHttpRequest().responseType !== \"string\") {\n              // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            }\n\n            pollOptions = {\n              abortSignal: this.pollAbort.signal,\n              headers: {},\n              timeout: 90000\n            };\n\n            if (transferFormat === TransferFormat.Binary) {\n              pollOptions.responseType = \"arraybuffer\";\n            }\n\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 2:\n            response = _a.sent();\n\n            if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode); // Mark running as false so that the poll immediately ends and runs the close logic\n\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              this.running = true;\n            } // tslint:disable-next-line:no-floating-promises\n\n\n            this.poll(this.url, pollOptions, closeError);\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.updateHeaderToken = function (request, token) {\n    if (token) {\n      // tslint:disable-next-line:no-string-literal\n      request.headers[\"Authorization\"] = \"Bearer \" + token;\n      return;\n    } // tslint:disable-next-line:no-string-literal\n\n\n    if (request.headers[\"Authorization\"]) {\n      // tslint:disable-next-line:no-string-literal\n      delete request.headers[\"Authorization\"];\n    }\n  };\n\n  LongPollingTransport.prototype.poll = function (url, pollOptions, closeError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, pollUrl, response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 8, 9]);\n\n            _a.label = 1;\n\n          case 1:\n            if (!this.running) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 2:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4\n            /*yield*/\n            , this.httpClient.get(pollUrl, pollOptions)];\n\n          case 4:\n            response = _a.sent();\n\n            if (response.statusCode === 204) {\n              this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\n              this.running = false;\n            } else if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode); // Unexpected status code\n\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \" + getDataDetail(response.content, this.logMessageContent));\n\n                if (this.onreceive) {\n                  this.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (!this.running) {\n              // Log but disregard errors that occur after we were stopped by DELETE\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \" + e_1.message);\n            } else {\n              if (e_1 instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                closeError = e_1;\n                this.running = false;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\n            this.stopped = true; // Clean up the shutdown timer if it was registered\n\n            if (this.shutdownTimer) {\n              clearTimeout(this.shutdownTimer);\n            } // Fire our onclosed event\n\n\n            if (this.onclose) {\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Firing onclose event. Error: \" + (closeError || \"<undefined>\"));\n              this.onclose(closeError);\n            }\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.running) {\n          return [2\n          /*return*/\n          , Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n\n        return [2\n        /*return*/\n        , sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteOptions, token;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 3, 4]);\n\n            this.running = false;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \" + this.url + \".\");\n            deleteOptions = {\n              headers: {}\n            };\n            return [4\n            /*yield*/\n            , this.accessTokenFactory()];\n\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(deleteOptions, token);\n            return [4\n            /*yield*/\n            , this.httpClient.delete(this.url, deleteOptions)];\n\n          case 2:\n            _a.sent();\n\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\n            if (!this.stopped) {\n              this.shutdownTimer = setTimeout(function () {\n                _this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\"); // Abort any outstanding poll\n\n\n                _this.pollAbort.abort();\n              }, this.shutdownTimeout);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return LongPollingTransport;\n}();\n\nexport { LongPollingTransport };","map":{"version":3,"mappings":"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","names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","sendMessage","SHUTDOWN_TIMEOUT","httpClient","accessTokenFactory","logger","logMessageContent","shutdownTimeout","pollAbort","Object","LongPollingTransport","aborted","url","transferFormat","isRequired","isIn","log","Trace","Binary","XMLHttpRequest","responseType","Error","pollOptions","abortSignal","signal","headers","timeout","token","_a","updateHeaderToken","pollUrl","Date","now","get","response","statusCode","closeError","statusText","running","poll","Promise","resolve","request","Information","content","onreceive","e_1","message","stopped","shutdownTimer","clearTimeout","onclose","data","reject","deleteOptions","delete","setTimeout","_this","Warning","abort"],"sourceRoot":"","sources":["../../src/LongPollingTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nconst SHUTDOWN_TIMEOUT = 5 * 1000;\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n\r\n    private url: string;\r\n    private pollAbort: AbortController;\r\n    private shutdownTimer: any; // We use 'any' because this is an object in NodeJS. But it still gets passed to clearTimeout, so it doesn't really matter\r\n    private shutdownTimeout: number;\r\n    private running: boolean;\r\n    private stopped: boolean;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean, shutdownTimeout?: number) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.accessTokenFactory();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        let closeError: Error;\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            closeError = new HttpError(response.statusText, response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.poll(this.url, pollOptions, closeError);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string) {\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest, closeError: Error): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.accessTokenFactory();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        closeError = new HttpError(response.statusText, response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after we were stopped by DELETE\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\r\n            this.stopped = true;\r\n\r\n            // Clean up the shutdown timer if it was registered\r\n            if (this.shutdownTimer) {\r\n                clearTimeout(this.shutdownTimer);\r\n            }\r\n\r\n            // Fire our onclosed event\r\n            if (this.onclose) {\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) Firing onclose event. Error: ${closeError || \"<undefined>\"}`);\r\n                this.onclose(closeError);\r\n            }\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        // Send a DELETE request to stop the poll\r\n        try {\r\n            this.running = false;\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.accessTokenFactory();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n        } finally {\r\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\r\n            if (!this.stopped) {\r\n                this.shutdownTimer = setTimeout(() => {\r\n                    this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\");\r\n\r\n                    // Abort any outstanding poll\r\n                    this.pollAbort.abort();\r\n                }, this.shutdownTimeout);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}